
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 25 23:44:46 CST 2015
//----------------------------------------------------

package ASintactico;

import java_cup.runtime.*;
import java.util.*;
import ASemantico.*;
import ALexico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 25 23:44:46 CST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\005\004\000\002\005\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\010\000\002" +
    "\013\007\000\002\013\007\000\002\013\010\000\002\013" +
    "\007\000\002\013\007\000\002\013\010\000\002\013\003" +
    "\000\002\030\010\000\002\030\011\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\005\000\002" +
    "\033\004\000\002\033\006\000\002\033\003\000\002\031" +
    "\015\000\002\031\011\000\002\032\011\000\002\032\014" +
    "\000\002\032\013\000\002\032\007\000\002\032\007\000" +
    "\002\032\007\000\002\032\012\000\002\032\012\000\002" +
    "\032\011\000\002\032\005\000\002\032\006\000\002\032" +
    "\010\000\002\032\007\000\002\032\011\000\002\032\006" +
    "\000\002\032\006\000\002\032\006\000\002\012\007\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\010\003\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\022\005\000\002\022\004\000\002\024\004\000\002\024" +
    "\005\000\002\024\004\000\002\024\005\000\002\024\004" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\003\000\002\014\004\000\002\014\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\010\000\002" +
    "\015\003\000\002\016\006\000\002\016\004\000\002\016" +
    "\003\000\002\017\005\000\002\017\003\000\002\017\005" +
    "\000\002\017\003\000\002\017\005\000\002\017\003\000" +
    "\002\017\003\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\010\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\011\000\002\023\007" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\021\010\000\002\021\010\000\002" +
    "\021\007\000\002\021\007\000\002\021\005\000\002\021" +
    "\007\000\002\021\005\000\002\021\010\000\002\021\003" +
    "\000\002\021\005\000\002\021\003\000\002\021\011\000" +
    "\002\021\007\000\002\021\007\000\002\021\005\000\002" +
    "\021\011\000\002\021\007\000\002\021\014\000\002\021" +
    "\012\000\002\021\014\000\002\021\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\006\003\004\004\005\001\002\000\060\002" +
    "\ufffe\003\037\006\011\014\035\026\032\043\023\044\036" +
    "\045\033\046\021\047\015\050\020\053\045\056\024\062" +
    "\025\063\022\064\012\065\027\066\017\067\016\071\043" +
    "\074\050\077\046\100\026\001\002\000\056\003\037\006" +
    "\011\014\035\026\032\043\023\044\036\045\033\046\021" +
    "\047\015\050\020\053\045\056\024\062\025\063\022\064" +
    "\012\065\027\066\017\067\016\071\043\074\050\077\046" +
    "\100\026\001\002\000\004\002\007\001\002\000\004\002" +
    "\001\001\002\000\102\003\uffef\005\uffef\006\uffef\010\uffef" +
    "\014\uffef\015\uffef\026\uffef\033\uffef\035\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef\053\uffef" +
    "\055\uffef\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\067\uffef\071\uffef\074\uffef\075\uffef" +
    "\077\uffef\100\uffef\001\002\000\004\100\u013d\001\002\000" +
    "\004\014\u0134\001\002\000\102\003\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\014\ufffa\015\ufffa\026\ufffa\033\ufffa\035\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa" +
    "\053\ufffa\055\ufffa\056\ufffa\060\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa\074\ufffa" +
    "\075\ufffa\077\ufffa\100\ufffa\001\002\000\102\003\037\005" +
    "\ufffc\006\011\010\ufffc\014\035\015\ufffc\026\032\033\ufffc" +
    "\035\ufffc\043\023\044\036\045\033\046\021\047\015\050" +
    "\020\052\ufffc\053\045\055\ufffc\056\024\060\ufffc\061\ufffc" +
    "\062\025\063\022\064\012\065\027\066\017\067\016\071" +
    "\043\074\050\075\ufffc\077\046\100\026\001\002\000\004" +
    "\100\uffcb\001\002\000\032\003\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\032\uffd0\001\002\000\004\100\uffc9\001\002\000" +
    "\004\014\u012d\001\002\000\004\100\uffca\001\002\000\004" +
    "\014\u0123\001\002\000\032\003\uffce\011\uffce\012\uffce\013" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\032\uffce\001\002\000\004\014\u0118\001\002\000" +
    "\004\014\u0106\001\002\000\022\011\uff87\014\366\020\147" +
    "\021\146\022\151\023\152\070\365\072\110\001\002\000" +
    "\032\003\uffd1\011\uffd1\012\uffd1\013\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\032\uffd1\001" +
    "\002\000\004\100\303\001\002\000\004\011\302\001\002" +
    "\000\004\014\245\001\002\000\004\100\uffc7\001\002\000" +
    "\004\011\244\001\002\000\016\043\023\044\036\065\027" +
    "\067\016\074\050\100\225\001\002\000\032\003\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\032\uffcd\001\002\000\004\072" +
    "\224\001\002\000\102\003\ufff9\005\ufff9\006\ufff9\010\ufff9" +
    "\014\ufff9\015\ufff9\026\ufff9\033\ufff9\035\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\053\ufff9" +
    "\055\ufff9\056\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\074\ufff9\075\ufff9" +
    "\077\ufff9\100\ufff9\001\002\000\016\011\uff85\013\uff85\020" +
    "\147\021\146\022\151\023\152\001\002\000\102\003\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\014\ufffb\015\ufffb\026\ufffb\033" +
    "\ufffb\035\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\052\ufffb\053\ufffb\055\ufffb\056\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\071\ufffb\074\ufffb\075\ufffb\077\ufffb\100\ufffb\001\002\000" +
    "\004\100\uffc8\001\002\000\004\005\145\001\002\000\004" +
    "\014\071\001\002\000\004\100\uffc6\001\002\000\004\100" +
    "\051\001\002\000\032\003\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\032\uffcf\001\002\000\004\014\052\001\002\000\020" +
    "\003\055\013\053\045\033\046\021\047\015\066\017\071" +
    "\043\001\002\000\004\016\066\001\002\000\004\100\063" +
    "\001\002\000\004\013\uffa4\001\002\000\004\013\057\001" +
    "\002\000\004\016\060\001\002\000\056\003\037\006\011" +
    "\014\035\026\032\043\023\044\036\045\033\046\021\047" +
    "\015\050\020\053\045\056\024\062\025\063\022\064\012" +
    "\065\027\066\017\067\016\071\043\074\050\077\046\100" +
    "\026\001\002\000\004\015\062\001\002\000\102\003\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\026\uffdc\033" +
    "\uffdc\035\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\052\uffdc\053\uffdc\055\uffdc\056\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\071\uffdc\074\uffdc\075\uffdc\077\uffdc\100\uffdc\001\002\000" +
    "\006\012\064\013\uffa5\001\002\000\016\003\055\045\033" +
    "\046\021\047\015\066\017\071\043\001\002\000\004\013" +
    "\uffa6\001\002\000\056\003\037\006\011\014\035\026\032" +
    "\043\023\044\036\045\033\046\021\047\015\050\020\053" +
    "\045\056\024\062\025\063\022\064\012\065\027\066\017" +
    "\067\016\071\043\074\050\077\046\100\026\001\002\000" +
    "\004\015\070\001\002\000\102\003\uffe3\005\uffe3\006\uffe3" +
    "\010\uffe3\014\uffe3\015\uffe3\026\uffe3\033\uffe3\035\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\053\uffe3\055\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\071\uffe3\074\uffe3" +
    "\075\uffe3\077\uffe3\100\uffe3\001\002\000\016\003\072\045" +
    "\033\046\021\047\015\066\017\071\043\001\002\000\004" +
    "\011\uffb4\001\002\000\004\100\141\001\002\000\004\011" +
    "\075\001\002\000\006\003\077\100\076\001\002\000\016" +
    "\036\117\037\112\040\114\041\116\042\111\076\113\001" +
    "\002\000\016\011\uffa7\013\uffa7\017\uffa7\024\uffa7\025\uffa7" +
    "\032\uffa7\001\002\000\004\011\101\001\002\000\006\003" +
    "\037\100\102\001\002\000\004\072\110\001\002\000\004" +
    "\013\104\001\002\000\004\054\105\001\002\000\056\003" +
    "\037\006\011\014\035\026\032\043\023\044\036\045\033" +
    "\046\021\047\015\050\020\053\045\056\024\062\025\063" +
    "\022\064\012\065\027\066\017\067\016\071\043\074\050" +
    "\077\046\100\026\001\002\000\004\055\107\001\002\000" +
    "\102\003\uffe5\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015\uffe5" +
    "\026\uffe5\033\uffe5\035\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\052\uffe5\053\uffe5\055\uffe5\056\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\071\uffe5\074\uffe5\075\uffe5\077\uffe5\100\uffe5" +
    "\001\002\000\006\011\uffb3\013\uffb3\001\002\000\020\043" +
    "\uffad\044\uffad\065\uffad\067\uffad\073\uffad\074\uffad\100\uffad" +
    "\001\002\000\020\043\uffaf\044\uffaf\065\uffaf\067\uffaf\073" +
    "\uffaf\074\uffaf\100\uffaf\001\002\000\020\043\uffac\044\uffac" +
    "\065\uffac\067\uffac\073\uffac\074\uffac\100\uffac\001\002\000" +
    "\020\043\uffb0\044\uffb0\065\uffb0\067\uffb0\073\uffb0\074\uffb0" +
    "\100\uffb0\001\002\000\020\043\023\044\036\065\027\067" +
    "\016\073\121\074\050\100\122\001\002\000\020\043\uffb1" +
    "\044\uffb1\065\uffb1\067\uffb1\073\uffb1\074\uffb1\100\uffb1\001" +
    "\002\000\020\043\uffae\044\uffae\065\uffae\067\uffae\073\uffae" +
    "\074\uffae\100\uffae\001\002\000\016\011\uffaa\013\uffaa\017" +
    "\uffaa\024\uffaa\025\uffaa\032\uffaa\001\002\000\022\003\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\017\uffcc\024\uffcc\025\uffcc\032" +
    "\uffcc\001\002\000\020\011\uffa9\013\uffa9\014\124\017\uffa9" +
    "\024\uffa9\025\uffa9\032\uffa9\001\002\000\016\011\uffab\013" +
    "\uffab\017\uffab\024\uffab\025\uffab\032\uffab\001\002\000\022" +
    "\003\130\043\023\044\036\065\027\067\016\073\121\074" +
    "\050\100\127\001\002\000\006\012\137\013\uff9e\001\002" +
    "\000\004\013\136\001\002\000\006\012\134\013\uffa2\001" +
    "\002\000\004\013\uff9d\001\002\000\006\012\132\013\uffa0" +
    "\001\002\000\022\003\130\043\023\044\036\065\027\067" +
    "\016\073\121\074\050\100\127\001\002\000\004\013\uffa1" +
    "\001\002\000\022\003\130\043\023\044\036\065\027\067" +
    "\016\073\121\074\050\100\127\001\002\000\004\013\uffa3" +
    "\001\002\000\016\011\uffa8\013\uffa8\017\uffa8\024\uffa8\025" +
    "\uffa8\032\uffa8\001\002\000\022\003\130\043\023\044\036" +
    "\065\027\067\016\073\121\074\050\100\127\001\002\000" +
    "\004\013\uff9f\001\002\000\004\070\142\001\002\000\016" +
    "\043\023\044\036\065\027\067\016\073\121\074\050\001" +
    "\002\000\004\011\uffb6\001\002\000\004\011\uffb5\001\002" +
    "\000\004\002\000\001\002\000\032\014\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\065\uff93\066\uff93\067\uff93" +
    "\071\uff93\074\uff93\100\uff93\001\002\000\032\014\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\047\uff92\065\uff92\066\uff92" +
    "\067\uff92\071\uff92\074\uff92\100\uff92\001\002\000\032\014" +
    "\035\043\023\044\036\045\033\046\021\047\015\065\027" +
    "\066\017\067\016\071\043\074\050\100\155\001\002\000" +
    "\032\014\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\065\uff91\066\uff91\067\uff91\071\uff91\074\uff91\100\uff91\001" +
    "\002\000\032\014\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\065\uff90\066\uff90\067\uff90\071\uff90\074\uff90\100" +
    "\uff90\001\002\000\006\011\uff86\013\uff86\001\002\000\004" +
    "\100\177\001\002\000\022\011\uff87\013\uff87\014\160\020" +
    "\147\021\146\022\151\023\152\070\157\001\002\000\032" +
    "\014\035\043\023\044\036\045\033\046\021\047\015\065" +
    "\027\066\017\067\016\071\043\074\050\100\155\001\002" +
    "\000\016\043\023\044\036\065\027\067\016\074\050\100" +
    "\170\001\002\000\024\003\130\013\161\043\023\044\036" +
    "\065\027\067\016\073\121\074\050\100\127\001\002\000" +
    "\016\011\uff89\013\uff89\020\147\021\146\022\151\023\152" +
    "\001\002\000\004\013\163\001\002\000\012\020\147\021" +
    "\146\022\151\023\152\001\002\000\032\014\035\043\023" +
    "\044\036\045\033\046\021\047\015\065\027\066\017\067" +
    "\016\071\043\074\050\100\155\001\002\000\006\011\uff88" +
    "\013\uff88\001\002\000\032\014\035\043\023\044\036\045" +
    "\033\046\021\047\015\065\027\066\017\067\016\071\043" +
    "\074\050\100\155\001\002\000\006\011\uff8a\013\uff8a\001" +
    "\002\000\012\020\147\021\146\022\151\023\152\001\002" +
    "\000\012\020\147\021\146\022\151\023\152\001\002\000" +
    "\032\014\035\043\023\044\036\045\033\046\021\047\015" +
    "\065\027\066\017\067\016\071\043\074\050\100\155\001" +
    "\002\000\006\011\uff8c\013\uff8c\001\002\000\032\014\035" +
    "\043\023\044\036\045\033\046\021\047\015\065\027\066" +
    "\017\067\016\071\043\074\050\100\155\001\002\000\006" +
    "\011\uff8d\013\uff8d\001\002\000\006\011\uff8b\013\uff8b\001" +
    "\002\000\004\070\200\001\002\000\020\014\203\043\023" +
    "\044\036\065\027\067\016\074\050\100\201\001\002\000" +
    "\012\020\147\021\146\022\151\023\152\001\002\000\012" +
    "\020\147\021\146\022\151\023\152\001\002\000\016\043" +
    "\023\044\036\065\027\067\016\074\050\100\204\001\002" +
    "\000\012\020\147\021\146\022\151\023\152\001\002\000" +
    "\012\020\147\021\146\022\151\023\152\001\002\000\032" +
    "\014\035\043\023\044\036\045\033\046\021\047\015\065" +
    "\027\066\017\067\016\071\043\074\050\100\155\001\002" +
    "\000\004\013\210\001\002\000\016\011\uff7d\013\uff7d\020" +
    "\147\021\146\022\151\023\152\001\002\000\032\014\035" +
    "\043\023\044\036\045\033\046\021\047\015\065\027\066" +
    "\017\067\016\071\043\074\050\100\155\001\002\000\006" +
    "\011\uff7e\013\uff7e\001\002\000\032\014\035\043\023\044" +
    "\036\045\033\046\021\047\015\065\027\066\017\067\016" +
    "\071\043\074\050\100\155\001\002\000\004\013\215\001" +
    "\002\000\016\011\uff7b\013\uff7b\020\147\021\146\022\151" +
    "\023\152\001\002\000\032\014\035\043\023\044\036\045" +
    "\033\046\021\047\015\065\027\066\017\067\016\071\043" +
    "\074\050\100\155\001\002\000\006\011\uff7c\013\uff7c\001" +
    "\002\000\032\014\035\043\023\044\036\045\033\046\021" +
    "\047\015\065\027\066\017\067\016\071\043\074\050\100" +
    "\155\001\002\000\006\011\uff8f\013\uff8f\001\002\000\032" +
    "\014\035\043\023\044\036\045\033\046\021\047\015\065" +
    "\027\066\017\067\016\071\043\074\050\100\155\001\002" +
    "\000\006\011\uff8e\013\uff8e\001\002\000\006\011\uffb2\013" +
    "\uffb2\001\002\000\012\020\147\021\146\022\151\023\152" +
    "\001\002\000\014\013\230\020\147\021\146\022\151\023" +
    "\152\001\002\000\032\014\035\043\023\044\036\045\033" +
    "\046\021\047\015\065\027\066\017\067\016\071\043\074" +
    "\050\100\155\001\002\000\016\011\uff81\013\uff81\020\147" +
    "\021\146\022\151\023\152\001\002\000\032\014\035\043" +
    "\023\044\036\045\033\046\021\047\015\065\027\066\017" +
    "\067\016\071\043\074\050\100\155\001\002\000\006\011" +
    "\uff82\013\uff82\001\002\000\004\013\234\001\002\000\016" +
    "\011\uff83\013\uff83\020\147\021\146\022\151\023\152\001" +
    "\002\000\032\014\035\043\023\044\036\045\033\046\021" +
    "\047\015\065\027\066\017\067\016\071\043\074\050\100" +
    "\155\001\002\000\006\011\uff84\013\uff84\001\002\000\032" +
    "\014\035\043\023\044\036\045\033\046\021\047\015\065" +
    "\027\066\017\067\016\071\043\074\050\100\155\001\002" +
    "\000\004\013\241\001\002\000\016\011\uff7f\013\uff7f\020" +
    "\147\021\146\022\151\023\152\001\002\000\032\014\035" +
    "\043\023\044\036\045\033\046\021\047\015\065\027\066" +
    "\017\067\016\071\043\074\050\100\155\001\002\000\006" +
    "\011\uff80\013\uff80\001\002\000\102\003\ufff7\005\ufff7\006" +
    "\ufff7\010\ufff7\014\ufff7\015\ufff7\026\ufff7\033\ufff7\035\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052" +
    "\ufff7\053\ufff7\055\ufff7\056\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\071\ufff7\074" +
    "\ufff7\075\ufff7\077\ufff7\100\ufff7\001\002\000\006\003\077" +
    "\100\076\001\002\000\004\013\256\001\002\000\012\013" +
    "\uffc5\017\250\024\251\025\252\001\002\000\006\003\077" +
    "\100\076\001\002\000\006\003\077\100\076\001\002\000" +
    "\006\003\077\100\076\001\002\000\004\013\uffc4\001\002" +
    "\000\004\013\uffc3\001\002\000\004\013\uffc2\001\002\000" +
    "\004\027\257\001\002\000\006\031\262\034\260\001\002" +
    "\000\056\003\037\006\011\014\035\026\032\043\023\044" +
    "\036\045\033\046\021\047\015\050\020\053\045\056\024" +
    "\062\025\063\022\064\012\065\027\066\017\067\016\071" +
    "\043\074\050\077\046\100\026\001\002\000\004\030\277" +
    "\001\002\000\022\003\077\043\023\044\036\065\027\067" +
    "\016\073\121\074\050\100\076\001\002\000\004\032\274" +
    "\001\002\000\004\032\271\001\002\000\004\032\266\001" +
    "\002\000\056\003\037\006\011\014\035\026\032\043\023" +
    "\044\036\045\033\046\021\047\015\050\020\053\045\056" +
    "\024\062\025\063\022\064\012\065\027\066\017\067\016" +
    "\071\043\074\050\077\046\100\026\001\002\000\004\033" +
    "\270\001\002\000\004\030\uffec\001\002\000\056\003\037" +
    "\006\011\014\035\026\032\043\023\044\036\045\033\046" +
    "\021\047\015\050\020\053\045\056\024\062\025\063\022" +
    "\064\012\065\027\066\017\067\016\071\043\074\050\077" +
    "\046\100\026\001\002\000\004\033\273\001\002\000\004" +
    "\030\uffeb\001\002\000\056\003\037\006\011\014\035\026" +
    "\032\043\023\044\036\045\033\046\021\047\015\050\020" +
    "\053\045\056\024\062\025\063\022\064\012\065\027\066" +
    "\017\067\016\071\043\074\050\077\046\100\026\001\002" +
    "\000\004\033\276\001\002\000\004\030\uffea\001\002\000" +
    "\102\003\uffed\005\uffed\006\uffed\010\uffed\014\uffed\015\uffed" +
    "\026\uffed\033\uffed\035\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\052\uffed\053\uffed\055\uffed\056\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\067\uffed\071\uffed\074\uffed\075\uffed\077\uffed\100\uffed" +
    "\001\002\000\004\035\301\001\002\000\004\030\uffe9\001" +
    "\002\000\102\003\ufff8\005\ufff8\006\ufff8\010\ufff8\014\ufff8" +
    "\015\ufff8\026\ufff8\033\ufff8\035\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8\053\ufff8\055\ufff8" +
    "\056\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\071\ufff8\074\ufff8\075\ufff8\077\ufff8" +
    "\100\ufff8\001\002\000\012\011\306\012\304\014\307\070" +
    "\310\001\002\000\004\100\363\001\002\000\004\011\362" +
    "\001\002\000\102\003\uffda\005\uffda\006\uffda\010\uffda\014" +
    "\uffda\015\uffda\026\uffda\033\uffda\035\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053\uffda\055" +
    "\uffda\056\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\071\uffda\074\uffda\075\uffda\077" +
    "\uffda\100\uffda\001\002\000\020\003\055\013\325\045\033" +
    "\046\021\047\015\066\017\071\043\001\002\000\022\014" +
    "\203\043\023\044\036\065\027\067\016\073\121\074\050" +
    "\100\312\001\002\000\004\011\324\001\002\000\016\011" +
    "\315\014\316\020\147\021\146\022\151\023\152\001\002" +
    "\000\014\011\314\020\147\021\146\022\151\023\152\001" +
    "\002\000\102\003\uffdf\005\uffdf\006\uffdf\010\uffdf\014\uffdf" +
    "\015\uffdf\026\uffdf\033\uffdf\035\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\053\uffdf\055\uffdf" +
    "\056\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\071\uffdf\074\uffdf\075\uffdf\077\uffdf" +
    "\100\uffdf\001\002\000\102\003\uffde\005\uffde\006\uffde\010" +
    "\uffde\014\uffde\015\uffde\026\uffde\033\uffde\035\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\052\uffde\053" +
    "\uffde\055\uffde\056\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\066\uffde\067\uffde\071\uffde\074\uffde\075" +
    "\uffde\077\uffde\100\uffde\001\002\000\024\003\130\013\317" +
    "\043\023\044\036\065\027\067\016\073\121\074\050\100" +
    "\127\001\002\000\004\011\323\001\002\000\004\013\321" +
    "\001\002\000\004\011\322\001\002\000\102\003\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\026\uffdd\033\uffdd" +
    "\035\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\052\uffdd\053\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\071" +
    "\uffdd\074\uffdd\075\uffdd\077\uffdd\100\uffdd\001\002\000\102" +
    "\003\uffdb\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb\026" +
    "\uffdb\033\uffdb\035\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\052\uffdb\053\uffdb\055\uffdb\056\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\071\uffdb\074\uffdb\075\uffdb\077\uffdb\100\uffdb\001" +
    "\002\000\102\003\uffe0\005\uffe0\006\uffe0\010\uffe0\014\uffe0" +
    "\015\uffe0\026\uffe0\033\uffe0\035\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\053\uffe0\055\uffe0" +
    "\056\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\071\uffe0\074\uffe0\075\uffe0\077\uffe0" +
    "\100\uffe0\001\002\000\004\016\355\001\002\000\004\013" +
    "\327\001\002\000\004\016\330\001\002\000\056\003\037" +
    "\006\011\014\035\026\032\043\023\044\036\045\033\046" +
    "\021\047\015\050\020\053\045\056\024\062\025\063\022" +
    "\064\012\065\027\066\017\067\016\071\043\074\050\077" +
    "\046\100\026\001\002\000\004\075\333\001\002\000\004" +
    "\011\353\001\002\000\020\043\023\044\036\065\027\067" +
    "\016\073\121\074\050\100\335\001\002\000\004\011\uff9c" +
    "\001\002\000\016\011\uff9a\014\342\020\147\021\146\022" +
    "\151\023\152\001\002\000\014\011\uff9b\020\147\021\146" +
    "\022\151\023\152\001\002\000\032\014\035\043\023\044" +
    "\036\045\033\046\021\047\015\065\027\066\017\067\016" +
    "\071\043\074\050\100\155\001\002\000\004\011\uff97\001" +
    "\002\000\032\014\035\043\023\044\036\045\033\046\021" +
    "\047\015\065\027\066\017\067\016\071\043\074\050\100" +
    "\155\001\002\000\024\003\130\013\343\043\023\044\036" +
    "\065\027\067\016\073\121\074\050\100\127\001\002\000" +
    "\014\011\uff96\020\147\021\146\022\151\023\152\001\002" +
    "\000\004\013\345\001\002\000\014\011\uff94\020\147\021" +
    "\146\022\151\023\152\001\002\000\032\014\035\043\023" +
    "\044\036\045\033\046\021\047\015\065\027\066\017\067" +
    "\016\071\043\074\050\100\155\001\002\000\004\011\uff95" +
    "\001\002\000\032\014\035\043\023\044\036\045\033\046" +
    "\021\047\015\065\027\066\017\067\016\071\043\074\050" +
    "\100\155\001\002\000\004\011\uff99\001\002\000\004\011" +
    "\uff98\001\002\000\004\015\354\001\002\000\102\003\uffe2" +
    "\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2\026\uffe2\033" +
    "\uffe2\035\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\052\uffe2\053\uffe2\055\uffe2\056\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\071\uffe2\074\uffe2\075\uffe2\077\uffe2\100\uffe2\001\002\000" +
    "\056\003\037\006\011\014\035\026\032\043\023\044\036" +
    "\045\033\046\021\047\015\050\020\053\045\056\024\062" +
    "\025\063\022\064\012\065\027\066\017\067\016\071\043" +
    "\074\050\077\046\100\026\001\002\000\004\075\333\001" +
    "\002\000\004\011\360\001\002\000\004\015\361\001\002" +
    "\000\102\003\uffe1\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\026\uffe1\033\uffe1\035\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\052\uffe1\053\uffe1\055\uffe1\056" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\071\uffe1\074\uffe1\075\uffe1\077\uffe1\100" +
    "\uffe1\001\002\000\102\003\uffd9\005\uffd9\006\uffd9\010\uffd9" +
    "\014\uffd9\015\uffd9\026\uffd9\033\uffd9\035\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9" +
    "\055\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\071\uffd9\074\uffd9\075\uffd9" +
    "\077\uffd9\100\uffd9\001\002\000\006\011\uffc0\012\304\001" +
    "\002\000\004\011\uffc1\001\002\000\020\043\023\044\036" +
    "\065\027\067\016\073\121\074\050\100\373\001\002\000" +
    "\024\003\130\013\161\043\023\044\036\065\027\067\016" +
    "\073\121\074\050\100\127\001\002\000\004\013\370\001" +
    "\002\000\014\011\371\020\147\021\146\022\151\023\152" +
    "\001\002\000\102\003\uffd7\005\uffd7\006\uffd7\010\uffd7\014" +
    "\uffd7\015\uffd7\026\uffd7\033\uffd7\035\uffd7\043\uffd7\044\uffd7" +
    "\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7\055" +
    "\uffd7\056\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\071\uffd7\074\uffd7\075\uffd7\077" +
    "\uffd7\100\uffd7\001\002\000\004\011\u0105\001\002\000\016" +
    "\011\376\014\377\020\147\021\146\022\151\023\152\001" +
    "\002\000\014\011\375\020\147\021\146\022\151\023\152" +
    "\001\002\000\102\003\uffd3\005\uffd3\006\uffd3\010\uffd3\014" +
    "\uffd3\015\uffd3\026\uffd3\033\uffd3\035\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\056\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\071\uffd3\074\uffd3\075\uffd3\077" +
    "\uffd3\100\uffd3\001\002\000\102\003\uffd5\005\uffd5\006\uffd5" +
    "\010\uffd5\014\uffd5\015\uffd5\026\uffd5\033\uffd5\035\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\071\uffd5\074\uffd5" +
    "\075\uffd5\077\uffd5\100\uffd5\001\002\000\024\003\130\013" +
    "\u0100\043\023\044\036\065\027\067\016\073\121\074\050" +
    "\100\127\001\002\000\004\011\u0104\001\002\000\004\013" +
    "\u0102\001\002\000\004\011\u0103\001\002\000\102\003\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\026\uffd6\033" +
    "\uffd6\035\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\052\uffd6\053\uffd6\055\uffd6\056\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\071\uffd6\074\uffd6\075\uffd6\077\uffd6\100\uffd6\001\002\000" +
    "\102\003\uffd8\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8" +
    "\026\uffd8\033\uffd8\035\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\071\uffd8\074\uffd8\075\uffd8\077\uffd8\100\uffd8" +
    "\001\002\000\102\003\uffd4\005\uffd4\006\uffd4\010\uffd4\014" +
    "\uffd4\015\uffd4\026\uffd4\033\uffd4\035\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4\055" +
    "\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\071\uffd4\074\uffd4\075\uffd4\077" +
    "\uffd4\100\uffd4\001\002\000\006\073\121\100\u0107\001\002" +
    "\000\004\013\u0116\001\002\000\010\003\u010b\012\u0109\013" +
    "\u010c\001\002\000\020\043\023\044\036\065\027\067\016" +
    "\073\121\074\050\100\u0111\001\002\000\004\013\u010e\001" +
    "\002\000\004\013\uffb9\001\002\000\004\011\u010d\001\002" +
    "\000\102\003\ufff2\005\ufff2\006\ufff2\010\ufff2\014\ufff2\015" +
    "\ufff2\026\ufff2\033\ufff2\035\ufff2\043\ufff2\044\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\052\ufff2\053\ufff2\055\ufff2\056" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2" +
    "\066\ufff2\067\ufff2\071\ufff2\074\ufff2\075\ufff2\077\ufff2\100" +
    "\ufff2\001\002\000\004\011\u010f\001\002\000\102\003\ufff3" +
    "\005\ufff3\006\ufff3\010\ufff3\014\ufff3\015\ufff3\026\ufff3\033" +
    "\ufff3\035\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\071\ufff3\074\ufff3\075\ufff3\077\ufff3\100\ufff3\001\002\000" +
    "\010\003\u010b\012\u0109\013\uffbb\001\002\000\010\003\u010b" +
    "\012\u0109\013\uffbf\001\002\000\010\003\u010b\012\u0109\013" +
    "\uffbd\001\002\000\004\013\uffbc\001\002\000\004\013\uffbe" +
    "\001\002\000\004\013\uffba\001\002\000\004\011\u0117\001" +
    "\002\000\102\003\ufff1\005\ufff1\006\ufff1\010\ufff1\014\ufff1" +
    "\015\ufff1\026\ufff1\033\ufff1\035\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\053\ufff1\055\ufff1" +
    "\056\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\071\ufff1\074\ufff1\075\ufff1\077\ufff1" +
    "\100\ufff1\001\002\000\006\003\077\100\076\001\002\000" +
    "\004\013\u011a\001\002\000\004\057\u011b\001\002\000\056" +
    "\003\u011d\006\011\014\035\026\032\043\023\044\036\045" +
    "\033\046\021\047\015\050\020\053\045\056\024\062\025" +
    "\063\022\064\012\065\027\066\017\067\016\071\043\074" +
    "\050\077\046\100\026\001\002\000\102\003\uffee\005\uffee" +
    "\006\uffee\010\uffee\014\uffee\015\uffee\026\uffee\033\uffee\035" +
    "\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\052\uffee\053\uffee\055\uffee\056\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\071\uffee" +
    "\074\uffee\075\uffee\077\uffee\100\uffee\001\002\000\104\003" +
    "\uffe6\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6\026\uffe6" +
    "\033\uffe6\035\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\052\uffe6\053\uffe6\055\uffe6\056\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\071\uffe6\072\224\074\uffe6\075\uffe6\077\uffe6\100\uffe6" +
    "\001\002\000\006\060\u011f\061\u0120\001\002\000\102\003" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\014\uffe8\015\uffe8\026\uffe8" +
    "\033\uffe8\035\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\052\uffe8\053\uffe8\055\uffe8\056\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\071\uffe8\074\uffe8\075\uffe8\077\uffe8\100\uffe8\001\002" +
    "\000\056\003\037\006\011\014\035\026\032\043\023\044" +
    "\036\045\033\046\021\047\015\050\020\053\045\056\024" +
    "\062\025\063\022\064\012\065\027\066\017\067\016\071" +
    "\043\074\050\077\046\100\026\001\002\000\004\060\u0122" +
    "\001\002\000\102\003\uffe7\005\uffe7\006\uffe7\010\uffe7\014" +
    "\uffe7\015\uffe7\026\uffe7\033\uffe7\035\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\055" +
    "\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7" +
    "\065\uffe7\066\uffe7\067\uffe7\071\uffe7\074\uffe7\075\uffe7\077" +
    "\uffe7\100\uffe7\001\002\000\006\073\121\100\u0124\001\002" +
    "\000\004\013\u012b\001\002\000\010\003\u010b\012\u0109\013" +
    "\u0127\001\002\000\004\013\u0129\001\002\000\004\011\u0128" +
    "\001\002\000\102\003\ufff5\005\ufff5\006\ufff5\010\ufff5\014" +
    "\ufff5\015\ufff5\026\ufff5\033\ufff5\035\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\052\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\071\ufff5\074\ufff5\075\ufff5\077" +
    "\ufff5\100\ufff5\001\002\000\004\011\u012a\001\002\000\102" +
    "\003\ufff6\005\ufff6\006\ufff6\010\ufff6\014\ufff6\015\ufff6\026" +
    "\ufff6\033\ufff6\035\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\052\ufff6\053\ufff6\055\ufff6\056\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\071\ufff6\074\ufff6\075\ufff6\077\ufff6\100\ufff6\001" +
    "\002\000\004\011\u012c\001\002\000\102\003\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\014\ufff4\015\ufff4\026\ufff4\033\ufff4\035" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\052\ufff4\053\ufff4\055\ufff4\056\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\071\ufff4" +
    "\074\ufff4\075\ufff4\077\ufff4\100\ufff4\001\002\000\006\003" +
    "\077\100\076\001\002\000\004\013\u012f\001\002\000\004" +
    "\051\u0130\001\002\000\056\003\037\006\011\014\035\026" +
    "\032\043\023\044\036\045\033\046\021\047\015\050\020" +
    "\053\045\056\024\062\025\063\022\064\012\065\027\066" +
    "\017\067\016\071\043\074\050\077\046\100\026\001\002" +
    "\000\004\052\u0132\001\002\000\102\003\uffe4\005\uffe4\006" +
    "\uffe4\010\uffe4\014\uffe4\015\uffe4\026\uffe4\033\uffe4\035\uffe4" +
    "\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052" +
    "\uffe4\053\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\071\uffe4\074" +
    "\uffe4\075\uffe4\077\uffe4\100\uffe4\001\002\000\026\005\ufffd" +
    "\010\ufffd\015\ufffd\033\ufffd\035\ufffd\052\ufffd\055\ufffd\060" +
    "\ufffd\061\ufffd\075\ufffd\001\002\000\004\073\121\001\002" +
    "\000\004\012\u0136\001\002\000\004\024\u013a\001\002\000" +
    "\004\013\u0138\001\002\000\004\011\u0139\001\002\000\102" +
    "\003\ufff0\005\ufff0\006\ufff0\010\ufff0\014\ufff0\015\ufff0\026" +
    "\ufff0\033\ufff0\035\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0\060" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\071\ufff0\074\ufff0\075\ufff0\077\ufff0\100\ufff0\001" +
    "\002\000\004\100\u013b\001\002\000\006\012\u0136\013\uffb8" +
    "\001\002\000\004\013\uffb7\001\002\000\004\007\u013e\001" +
    "\002\000\056\003\037\006\011\014\035\026\032\043\023" +
    "\044\036\045\033\046\021\047\015\050\020\053\045\056" +
    "\024\062\025\063\022\064\012\065\027\066\017\067\016" +
    "\071\043\074\050\077\046\100\026\001\002\000\004\010" +
    "\u0140\001\002\000\102\003\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\014\uffd2\015\uffd2\026\uffd2\033\uffd2\035\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2" +
    "\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\071\uffd2\074\uffd2\075\uffd2" +
    "\077\uffd2\100\uffd2\001\002\000\004\005\u0142\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\004\006\005\001\001\000\030\002\027\003" +
    "\040\005\u0140\010\046\012\007\013\013\014\030\021\033" +
    "\030\041\031\012\032\037\001\001\000\030\002\027\003" +
    "\040\005\043\010\046\012\007\013\013\014\030\021\033" +
    "\030\041\031\012\032\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\027\003\040\005" +
    "\u0132\010\046\012\007\013\013\014\030\021\033\030\041" +
    "\031\012\032\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\053\016\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\027\003\040\005\060\010\046\012\007\013" +
    "\013\014\030\021\033\030\041\031\012\032\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\053\016\064\001\001\000\002\001\001\000\030" +
    "\002\027\003\040\005\066\010\046\012\007\013\013\014" +
    "\030\021\033\030\041\031\012\032\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\072\007\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\077\001\001\000\004\011\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\027\003\040\005\105\010\046\012\007\013\013" +
    "\014\030\021\033\030\041\031\012\032\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\122\004\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\130\004\124" +
    "\017\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\130\004\124\017\132\001\001\000\002\001\001\000" +
    "\010\003\130\004\124\017\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\130\004\124\017\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\142" +
    "\004\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\153\003\040\021\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\155\001\001\000\010\002\153\003\040\021\175\001" +
    "\001\000\004\003\170\001\001\000\010\003\130\004\124" +
    "\017\161\001\001\000\004\027\165\001\001\000\002\001" +
    "\001\000\004\027\163\001\001\000\010\002\153\003\040" +
    "\021\164\001\001\000\002\001\001\000\010\002\153\003" +
    "\040\021\166\001\001\000\002\001\001\000\004\027\173" +
    "\001\001\000\004\027\171\001\001\000\010\002\153\003" +
    "\040\021\172\001\001\000\002\001\001\000\010\002\153" +
    "\003\040\021\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\201\001\001\000\004" +
    "\027\221\001\001\000\004\027\217\001\001\000\004\003" +
    "\204\001\001\000\004\027\212\001\001\000\004\027\205" +
    "\001\001\000\010\002\153\003\040\021\206\001\001\000" +
    "\002\001\001\000\004\027\210\001\001\000\010\002\153" +
    "\003\040\021\211\001\001\000\002\001\001\000\010\002" +
    "\153\003\040\021\213\001\001\000\002\001\001\000\004" +
    "\027\215\001\001\000\010\002\153\003\040\021\216\001" +
    "\001\000\002\001\001\000\010\002\153\003\040\021\220" +
    "\001\001\000\002\001\001\000\010\002\153\003\040\021" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\236\001\001\000\004\027\226\001\001\000\010\002" +
    "\153\003\040\021\232\001\001\000\004\027\230\001\001" +
    "\000\010\002\153\003\040\021\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\234\001\001\000\010" +
    "\002\153\003\040\021\235\001\001\000\002\001\001\000" +
    "\010\002\153\003\040\021\237\001\001\000\002\001\001" +
    "\000\004\027\241\001\001\000\010\002\153\003\040\021" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\246\026\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\246\026\254\001\001\000\006\015\246" +
    "\026\253\001\001\000\006\015\246\026\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\260\001\001\000\030\002\027\003" +
    "\040\005\277\010\046\012\007\013\013\014\030\021\033" +
    "\030\041\031\012\032\037\001\001\000\002\001\001\000" +
    "\010\003\264\004\263\015\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\027\003" +
    "\040\005\266\010\046\012\007\013\013\014\030\021\033" +
    "\030\041\031\012\032\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\027\003\040\005\271\010\046" +
    "\012\007\013\013\014\030\021\033\030\041\031\012\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\027\003\040\005\274\010\046\012\007\013\013\014" +
    "\030\021\033\030\041\031\012\032\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\053\016\325\001\001\000\006\003\312" +
    "\004\310\001\001\000\002\001\001\000\004\027\221\001" +
    "\001\000\004\027\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\130\004\124\017\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\027" +
    "\003\040\005\330\010\046\012\007\013\013\014\030\021" +
    "\033\030\041\031\012\032\037\001\001\000\004\023\331" +
    "\001\001\000\002\001\001\000\006\003\335\004\333\001" +
    "\001\000\002\001\001\000\004\027\340\001\001\000\004" +
    "\027\336\001\001\000\010\002\153\003\040\021\337\001" +
    "\001\000\002\001\001\000\010\002\153\003\040\021\351" +
    "\001\001\000\010\003\130\004\124\017\343\001\001\000" +
    "\004\027\347\001\001\000\002\001\001\000\004\027\345" +
    "\001\001\000\010\002\153\003\040\021\346\001\001\000" +
    "\002\001\001\000\010\002\153\003\040\021\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\027\003\040\005\355\010\046" +
    "\012\007\013\013\014\030\021\033\030\041\031\012\032" +
    "\037\001\001\000\004\023\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\363\001\001\000\002\001\001\000\006\003\373" +
    "\004\371\001\001\000\010\003\130\004\124\017\366\001" +
    "\001\000\002\001\001\000\004\027\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\173\001\001\000" +
    "\004\027\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\130\004\124\017\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0107\001" +
    "\001\000\002\001\001\000\004\024\u0109\001\001\000\006" +
    "\003\u0111\004\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0114\001\001\000\004\024" +
    "\u0113\001\001\000\004\024\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\246\026\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\027\003\040\005" +
    "\u011d\010\046\012\007\013\013\014\030\021\033\030\041" +
    "\031\012\032\037\033\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\027\003\040\005\u0120\010\046\012\007\013\013\014" +
    "\030\021\033\030\041\031\012\032\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u0124\001\001\000" +
    "\002\001\001\000\004\024\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\246\026\u012d\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\027\003\040\005\u0130\010\046\012\007" +
    "\013\013\014\030\021\033\030\041\031\012\032\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0134\001\001\000\004\025\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\027\003\040" +
    "\005\u013e\010\046\012\007\013\013\014\030\021\033\030" +
    "\041\031\012\032\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public ArrayList<Errores> listaErrores = new ArrayList<Errores>();
	public Errores _errores = new Errores();


	public ArrayList<Errores> getErrores(){
		return listaErrores;
	}
	String mensajeError;


	public void setError(String msg){
		_errores.setMensaje("Error Sintactico: " + msg);
		listaErrores.add( _errores );
	}

	public void setError(String msg, String tipo){
		_errores.setMensaje("Error " + tipo + ": " + msg);
	}

	@Override
	public void syntax_error(Symbol token){
            ALexico._gui.selectorLinea.HighLightLine(token.left);
            setError("Error sintactico en: '"+ token.value + "' En la linea: "+ (token.left+1) + " en la columna: "+(token.right+1));
            ALexico._gui.WriteLn("Error sintactico en: '"+ token.value + "' En la linea: "+ (token.left+1) + " en la columna: "+(token.right+1));
        }

	@Override
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
		report_fatal_error("Error fatal", s);
	}

	@Override
	public void report_error(String message, Object info) {
		if(info instanceof Symbol) {
			_errores = new Errores();
			Symbol s = ((Symbol) info);
			if(s.left >= 0) {
				_errores.setLinea(s.left + 1);
				if(s.right >= 0)
					_errores.setColumna(s.right + 1);
			}
		}
	}       

	@Override
	public void report_fatal_error(String message, Object info) {
		done_parsing();
		report_error(message, info);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // op_aritmeticas ::= types ID ASIG PAR_IZQ ID operaciones op_aritmeticas PAR_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // op_aritmeticas ::= types ID ASIG PAR_IZQ ID operaciones op_aritmeticas PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // op_aritmeticas ::= types ID ASIG PAR_IZQ literal operaciones op_aritmeticas PAR_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // op_aritmeticas ::= types ID ASIG PAR_IZQ literal operaciones op_aritmeticas PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // op_aritmeticas ::= PAR_IZQ ID operaciones op_aritmeticas PAR_DER 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // op_aritmeticas ::= PAR_IZQ ID operaciones op_aritmeticas PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // op_aritmeticas ::= PAR_IZQ literal PAR_DER 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // op_aritmeticas ::= PAR_IZQ literal PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // op_aritmeticas ::= PAR_IZQ literal operaciones op_aritmeticas PAR_DER 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // op_aritmeticas ::= PAR_IZQ literal operaciones op_aritmeticas PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // op_aritmeticas ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // op_aritmeticas ::= literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // op_aritmeticas ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // op_aritmeticas ::= ID PAR_IZQ lista_parametros2 PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // op_aritmeticas ::= ID PAR_IZQ PAR_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // op_aritmeticas ::= ID PAR_IZQ PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // op_aritmeticas ::= ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // op_aritmeticas ::= ID ASIG literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // op_aritmeticas ::= ID ASIG ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // op_aritmeticas ::= types ID ASIG ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // op_aritmeticas ::= types ID ASIG literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operaciones ::= OPDIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operaciones ::= OPMULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operaciones ::= OPSUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operaciones ::= OPRES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operaciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // return_value ::= RETURN ID PAR_IZQ lista_parametros2 PAR_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // return_value ::= RETURN ID PAR_IZQ lista_parametros2 PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return_value ::= RETURN ID PAR_IZQ PAR_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return_value ::= RETURN literal operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // return_value ::= RETURN ID operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // return_value ::= RETURN ID PAR_IZQ PAR_DER operaciones op_aritmeticas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // return_value ::= RETURN ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // return_value ::= RETURN literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // return_value ::= RETURN literal_String 
            {
              Object RESULT =null;
		int st_litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st_litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st_lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_value",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_parametros2 ::= error 
            {
              Object RESULT =null;
		 parser.setError("Error en los parametros 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_parametros2 ::= literal_String 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_parametros2 ::= literal_String COMA lista_parametros2 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lista_parametros2 ::= literal 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_parametros2 ::= literal COMA lista_parametros2 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_parametros2 ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_parametros2 ::= ID COMA lista_parametros2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_parametros ::= error 
            {
              Object RESULT =null;
		 parser.setError("Error en los parametros 1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_parametros ::= types ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lista_parametros ::= types ID COMA lista_parametros 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assignaciones ::= error 
            {
              Object RESULT =null;
		 parser.setError("Error en las asignaciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignaciones ::= ID operadorRel ID PAR_IZQ lista_parametros2 PAR_DER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignaciones ::= ID operadorRel ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assignaciones ::= ID operadorRel literal_String 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assignaciones ::= ID operadorRel literal 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignaciones",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadorRel ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadorRel ::= OPREL_DIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadorRel ::= OPREL_MEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorRel ::= OPREL_MAQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorRel ::= OPREL_MEI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorRel ::= OPREL_MAI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRel",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // incremento ::= error INCREMENTADORES 
            {
              Object RESULT =null;
		 parser.setError("ERROR en los incrementadores."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // incremento ::= ID INCREMENTADORES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incremento",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inicial ::= error 
            {
              Object RESULT =null;
		 parser.setError("ERROR en la inicializacion."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicial ::= types ID ASIG literal_String 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicial ::= types ID ASIG literal 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lista_assig3 ::= COMA AND ID lista_assig3 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lista_assig3 ::= COMA AND ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lista_assig2 ::= error 
            {
              Object RESULT =null;
		 parser.setError("ERROR en la lista de assignaciones 2"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lista_assig2 ::= COMA literal_String lista_assig2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_assig2 ::= COMA literal_String 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_assig2 ::= COMA literal lista_assig2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_assig2 ::= COMA literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_assig2 ::= COMA ID lista_assig2 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_assig2 ::= COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_assig ::= COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_assig ::= COMA ID lista_assig 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_assig",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asig_or_and ::= assignaciones NOT asig_or_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asig_or_and ::= assignaciones AND asig_or_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asig_or_and ::= assignaciones OR asig_or_and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asig_or_and ::= assignaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig_or_and",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // void_type ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("void_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // types ::= BOOL_OPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // types ::= DOUBLE_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // types ::= CHAR_ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // types ::= CHAR_OPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // types ::= INT_NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal_String ::= STRING 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_String",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= FALSE 
            {
              Object RESULT =null;
		int flsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= TRUE 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= DOUBLE 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= CHAR 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= NUM 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_definition ::= PROCEDURE ID BEGIN_PROCEDURE statements END_PROCEDURE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration_statement ::= ID ASIG literal PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration_statement ::= ID ASIG literal_String PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st_litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st_litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object st_lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration_statement ::= ID ASIG ID PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration_statement ::= ID ASIG ID PAR_IZQ lista_parametros2 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration_statement ::= ID PAR_IZQ lista_parametros2 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaration_statement ::= ID ASIG ID PAR_IZQ PAR_DER PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration_statement ::= types ID lista_assig PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration_statement ::= types ID PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaration_statement ::= types ID ASIG ID PAR_IZQ PAR_DER PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaration_statement ::= void_type ID PAR_IZQ lista_parametros PAR_DER BRA_IZQ statements BRA_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration_statement ::= types ID ASIG ID PAR_IZQ lista_parametros2 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration_statement ::= types ID ASIG ID PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration_statement ::= types ID ASIG literal PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_statement ::= types ID ASIG literal_String PCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_statement ::= types ID PAR_IZQ PAR_DER BRA_IZQ statements return_value PCOMA BRA_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_statement ::= types ID PAR_IZQ lista_parametros PAR_DER BRA_IZQ statements return_value PCOMA BRA_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_statement ::= void_type ID PAR_IZQ PAR_DER BRA_IZQ statements BRA_DER 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iteration_statement ::= WHILE PAR_IZQ asig_or_and PAR_DER BEGIN_WHILE statements END_WHILE 
            {
              Object RESULT =null;
		int while2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int while2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object while2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iteration_statement ::= FOR PAR_IZQ inicial PCOMA assignaciones PCOMA incremento PAR_DER BEGIN_FOR statements END_FOR 
            {
              Object RESULT =null;
		int fortleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int fortright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object fort = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object inicial = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int assigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_then_stmnt ::= error 
            {
              Object RESULT =null;
		 parser.setError("Error en un IF o un SELECT_CASE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_stmnt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_then_stmnt ::= statements ELSE_IF statements END_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_stmnt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_then_stmnt ::= statements END_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_then_stmnt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // select_case_body ::= DEFAULT_CASE statements END_DEFAULT_CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_case_body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // select_case_body ::= CASE_OPT assignaciones BEGIN_CASE_OPT statements END_CASE_OPT 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_case_body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // select_case_body ::= CASE_OPT literal_String BEGIN_CASE_OPT statements END_CASE_OPT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_case_body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // select_case_body ::= CASE_OPT literal BEGIN_CASE_OPT statements END_CASE_OPT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_case_body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // selection_statement ::= SELECT_CASE PAR_IZQ asig_or_and PAR_DER BEGIN_SELECT_CASE select_case_body END_SELECT_CASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // selection_statement ::= IF PAR_IZQ asig_or_and PAR_DER IF_THEN if_then_stmnt 
            {
              Object RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ifs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= function_definition 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= READ PAR_IZQ literal_String lista_assig3 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= WRITE PAR_IZQ ID PAR_DER PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= WRITE PAR_IZQ literal_String PAR_DER PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= WRITE PAR_IZQ literal_String lista_assig2 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= WRITE_LN PAR_IZQ ID PAR_DER PCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WRITE_LN PAR_IZQ literal_String PAR_DER PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WRITE_LN PAR_IZQ literal_String lista_assig2 PAR_DER PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= op_aritmeticas PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= incremento PCOMA 
            {
              Object RESULT =null;
		int semileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= declaration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error 
            {
              Object RESULT =null;
		 parser.setError("Error en el MAIN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error statements END_MAIN 
            {
              Object RESULT =null;
		 parser.setError("Existe un END_MAIN sin un MAIN."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= MAIN statements END_MAIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

