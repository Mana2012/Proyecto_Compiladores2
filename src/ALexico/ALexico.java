/* The following code was generated by JFlex 1.4.3 on 3/24/15 7:21 AM */

package ALexico;
import ASintactico.sym;
import java.io.FileWriter;
import java.io.PrintWriter;
import java_cup.runtime.Symbol;
import GUI.GUI;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/24/15 7:21 AM from the specification file
 * <tt>src/ALexico/ALexico.flex</tt>
 */
public class ALexico extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\2\0\1\2\22\0\1\2\1\0\1\21\4\0"+
    "\1\20\1\42\1\43\1\44\1\37\1\16\1\40\1\5\1\45\1\3"+
    "\11\6\1\0\1\17\1\46\1\50\1\47\2\0\1\12\1\30\1\22"+
    "\1\14\1\10\1\34\1\35\1\23\1\33\2\4\1\31\1\32\1\13"+
    "\1\15\1\26\1\4\1\7\1\36\1\11\1\27\1\4\1\41\1\4"+
    "\1\25\1\4\4\0\1\24\1\0\1\12\1\30\1\22\1\14\1\10"+
    "\1\34\1\35\1\23\1\33\2\4\1\31\1\32\1\13\1\15\1\26"+
    "\1\4\1\7\1\36\1\11\1\27\1\4\1\41\1\4\1\25\1\4"+
    "\1\51\1\0\1\52\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\7\1\1\4"+
    "\1\5\11\1\1\6\1\7\1\1\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\1\2\0\11\17\1\20"+
    "\2\0\7\17\1\21\3\17\1\22\2\17\1\23\1\24"+
    "\1\25\1\26\1\0\1\2\1\27\1\30\4\17\1\31"+
    "\1\32\2\17\1\33\1\34\7\17\1\0\1\17\1\35"+
    "\3\17\1\36\1\0\1\17\1\37\7\17\1\40\2\0"+
    "\4\17\11\0\2\17\2\0\2\17\3\0\1\41\1\17"+
    "\1\42\1\43\4\0\1\44\4\0\2\17\3\0\1\17"+
    "\4\0\1\17\5\0\1\45\2\0\1\46\1\17\4\0"+
    "\1\17\6\0\1\47\1\50\5\0\1\51\4\0\1\52"+
    "\2\0\1\17\7\0\1\53\4\0\1\54\3\0\1\55"+
    "\1\56\2\0\1\57\2\0\1\60\6\0\1\61\1\62"+
    "\15\0\1\63\1\64\1\0\1\65\7\0\1\66\10\0"+
    "\1\67\3\0\1\70\1\0\1\71\2\0\1\72\2\0"+
    "\1\73\2\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\126\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\53\0\53\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\53\0\53\0\53\0\53\0\u0408"+
    "\0\u0433\0\u045e\0\u0489\0\126\0\u04b4\0\201\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\201\0\u0637"+
    "\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\53\0\u0866\0\u0891\0\53"+
    "\0\53\0\53\0\53\0\u0489\0\u0489\0\u04b4\0\201\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\201\0\201\0\u0968\0\u0993\0\53"+
    "\0\u0662\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\201\0\u0b41\0\u0b6c\0\u0b97\0\201\0\u0bc2"+
    "\0\u0bed\0\201\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\201\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\201\0\u114d\0\u1178\0\201\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\53\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb"+
    "\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\53"+
    "\0\u15ab\0\u15d6\0\53\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\53"+
    "\0\53\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\53\0\u18dc"+
    "\0\u1907\0\u1932\0\u195d\0\53\0\u1988\0\u19b3\0\u19de\0\u1a09"+
    "\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\53\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\u1bb7\0\53\0\u1be2\0\u1c0d\0\u1c38\0\53"+
    "\0\201\0\u1c63\0\u1c8e\0\53\0\u1cb9\0\u1ce4\0\53\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\53\0\53\0\u1e11"+
    "\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69"+
    "\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\53\0\53\0\u2040\0\53"+
    "\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\53"+
    "\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5"+
    "\0\53\0\u22f0\0\u231b\0\u2346\0\53\0\u2371\0\53\0\u239c"+
    "\0\u23c7\0\53\0\u23f2\0\u241d\0\53\0\u2448\0\u2473\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\5\1\2\1\5\1\23\1\5\1\24"+
    "\1\5\1\25\1\26\1\27\1\5\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\2\56\0\1\44\1\0\1\45\1\44\47\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\12\46\2\0"+
    "\1\46\14\0\1\6\1\0\1\45\1\6\47\0\2\46"+
    "\1\0\2\46\1\47\5\46\4\0\2\46\1\0\12\46"+
    "\2\0\1\46\14\0\2\46\1\0\5\46\1\50\2\46"+
    "\4\0\2\46\1\0\4\46\1\51\5\46\2\0\1\46"+
    "\14\0\2\46\1\0\1\46\1\52\6\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\5\46"+
    "\1\53\2\46\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\7\46\1\54\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\2\46\1\55"+
    "\4\46\1\56\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\1\46\1\57\6\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\15\0\1\60\2\0\7\60"+
    "\4\0\2\60\1\0\12\60\2\0\1\60\11\0\1\61"+
    "\1\0\51\61\3\0\2\46\1\0\4\46\1\62\3\46"+
    "\4\0\1\46\1\63\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\1\46\1\64\6\46\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\2\46\1\65"+
    "\4\46\1\66\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\4\46\1\67\3\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\5\46"+
    "\1\70\2\46\4\0\2\46\1\0\7\46\1\71\2\46"+
    "\2\0\1\46\14\0\2\46\1\0\4\46\1\72\2\46"+
    "\1\73\4\0\2\46\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\2\46\1\74\5\46\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\50\0\1\75\53\0\1\75\15\0"+
    "\2\46\1\0\1\46\1\76\6\46\4\0\1\46\1\77"+
    "\1\0\12\46\2\0\1\46\60\0\1\100\1\101\52\0"+
    "\1\102\52\0\1\103\2\0\1\104\1\0\50\104\1\105"+
    "\3\0\1\106\2\0\1\106\47\0\2\46\1\0\3\46"+
    "\1\107\1\110\3\46\4\0\2\46\1\0\12\46\2\0"+
    "\1\46\14\0\2\46\1\0\6\46\1\111\1\46\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\11\46\1\112\2\0\1\46"+
    "\14\0\2\46\1\0\10\46\4\0\2\46\1\0\2\46"+
    "\1\113\7\46\2\0\1\46\14\0\2\46\1\0\6\46"+
    "\1\114\1\46\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\3\46\1\115\4\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\0\7\46\1\116\2\46\2\0\1\46"+
    "\14\0\2\46\1\0\10\46\4\0\2\46\1\0\2\46"+
    "\1\117\7\46\2\0\1\46\31\0\1\120\32\0\1\61"+
    "\1\0\17\61\1\121\31\61\3\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\0\11\46\1\122\2\0\1\46\14\0"+
    "\2\46\1\0\4\46\1\123\3\46\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\7\46\1\124"+
    "\4\0\2\46\1\0\12\46\2\0\1\46\14\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\0\10\46\1\125\1\46"+
    "\2\0\1\46\14\0\2\46\1\0\7\46\1\126\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\6\46\1\127\3\46\2\0"+
    "\1\46\14\0\2\46\1\0\3\46\1\130\4\46\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\131\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\4\46\1\132"+
    "\5\46\2\0\1\46\14\0\2\46\1\0\1\46\1\133"+
    "\6\46\4\0\2\46\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\4\46\1\134"+
    "\5\46\2\0\1\46\14\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\6\46\1\135\3\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\6\46\1\136"+
    "\3\46\2\0\1\46\14\0\2\46\1\0\6\46\1\137"+
    "\1\46\4\0\2\46\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\140\12\46\2\0"+
    "\1\46\14\0\2\46\1\0\2\46\1\141\5\46\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\2\46\1\142\5\46\4\0\2\46\1\0\12\46\2\0"+
    "\1\46\14\0\2\46\1\0\4\46\1\143\3\46\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\3\46\1\144\6\46\2\0"+
    "\1\46\14\0\2\46\1\0\2\46\1\145\5\46\4\0"+
    "\2\46\1\0\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\1\46\1\146\6\46\4\0\2\46\1\0\12\46\2\0"+
    "\1\46\14\0\2\46\1\0\10\46\4\0\1\147\1\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\0\6\46\1\150\3\46\2\0\1\46"+
    "\14\0\2\46\1\0\10\46\4\0\2\46\1\0\4\46"+
    "\1\151\5\46\2\0\1\46\14\0\2\46\1\0\5\46"+
    "\1\152\2\46\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\10\46\4\0\2\46\1\153\12\46"+
    "\2\0\1\46\22\0\1\154\44\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\0\11\46\1\155\2\0\1\46\14\0"+
    "\2\46\1\0\2\46\1\156\5\46\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\3\46\1\157"+
    "\4\46\4\0\2\46\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\4\46\1\160"+
    "\5\46\2\0\1\46\25\0\1\161\5\0\1\162\3\0"+
    "\1\163\3\0\1\164\1\165\1\166\1\0\1\167\2\0"+
    "\1\170\14\0\2\46\1\0\10\46\4\0\2\46\1\171"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\2\46\1\172\7\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\4\46\1\173"+
    "\5\46\2\0\1\46\14\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\174\12\46\2\0\1\46\14\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\175\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\2\46\1\176\5\46\4\0\2\46\1\0"+
    "\12\46\2\0\1\46\14\0\2\46\1\0\5\46\1\177"+
    "\2\46\4\0\2\46\1\0\12\46\2\0\1\46\14\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\200\12\46\2\0"+
    "\1\46\24\0\1\201\62\0\1\202\32\0\2\46\1\0"+
    "\2\46\1\203\5\46\4\0\2\46\1\0\12\46\2\0"+
    "\1\46\14\0\2\46\1\0\10\46\4\0\1\204\1\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\2\46"+
    "\1\205\5\46\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\2\46\1\206\5\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\21\0\1\207\54\0\1\210"+
    "\47\0\1\211\55\0\1\212\74\0\1\213\33\0\1\214"+
    "\45\0\1\215\65\0\1\216\62\0\1\217\22\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\0\4\46\1\220\5\46"+
    "\2\0\1\46\14\0\2\46\1\0\2\46\1\221\5\46"+
    "\4\0\2\46\1\0\12\46\2\0\1\46\26\0\1\222"+
    "\47\0\1\223\2\0\1\224\40\0\2\46\1\0\6\46"+
    "\1\225\1\46\4\0\2\46\1\0\12\46\2\0\1\46"+
    "\14\0\2\46\1\0\10\46\4\0\2\46\1\226\12\46"+
    "\2\0\1\46\26\0\1\227\64\0\1\230\33\0\1\231"+
    "\45\0\2\46\1\0\3\46\1\232\4\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\14\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\233\12\46\2\0\1\46\45\0\1\234"+
    "\54\0\1\235\31\0\1\236\70\0\1\237\26\0\1\240"+
    "\74\0\1\241\54\0\1\242\53\0\1\243\21\0\2\46"+
    "\1\0\3\46\1\244\4\46\4\0\2\46\1\0\12\46"+
    "\2\0\1\46\14\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\245\12\46\2\0\1\46\37\0\1\246\33\0\1\247"+
    "\71\0\1\250\27\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\0\2\46\1\251\7\46\2\0\1\46\33\0\1\252"+
    "\3\0\1\253\5\0\1\254\1\0\1\255\2\0\1\256"+
    "\37\0\1\257\56\0\1\260\33\0\1\261\42\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\262\12\46\2\0\1\46"+
    "\42\0\1\263\33\0\1\264\50\0\1\265\64\0\1\266"+
    "\43\0\1\267\47\0\1\270\73\0\1\271\24\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\272\12\46\2\0\1\46"+
    "\24\0\1\273\50\0\1\274\50\0\1\275\53\0\1\276"+
    "\45\0\2\46\1\0\1\46\1\277\6\46\4\0\2\46"+
    "\1\0\12\46\2\0\1\46\23\0\1\300\47\0\1\301"+
    "\60\0\1\302\45\0\1\303\65\0\1\304\37\0\1\305"+
    "\64\0\1\306\43\0\1\307\66\0\1\310\47\0\1\311"+
    "\36\0\1\312\64\0\1\313\40\0\1\314\64\0\1\315"+
    "\57\0\1\316\35\0\1\317\47\0\1\320\46\0\2\46"+
    "\1\0\2\46\1\321\5\46\4\0\2\46\1\0\12\46"+
    "\2\0\1\46\47\0\1\322\31\0\1\323\44\0\1\324"+
    "\74\0\1\325\54\0\1\326\26\0\1\327\55\0\1\330"+
    "\71\0\1\331\36\0\1\332\51\0\1\333\47\0\1\334"+
    "\53\0\1\335\72\0\1\336\45\0\1\337\35\0\1\340"+
    "\64\0\1\341\40\0\1\342\73\0\1\343\57\0\1\344"+
    "\25\0\1\345\67\0\1\346\53\0\1\347\47\0\1\350"+
    "\64\0\1\351\40\0\1\352\36\0\1\353\64\0\1\354"+
    "\40\0\1\355\52\0\1\356\66\0\1\357\37\0\1\360"+
    "\50\0\1\361\65\0\1\362\40\0\1\363\57\0\1\364"+
    "\51\0\1\365\47\0\1\366\63\0\1\367\40\0\1\370"+
    "\54\0\1\371\64\0\1\372\54\0\1\373\53\0\1\374"+
    "\47\0\1\375\40\0\1\376\76\0\1\377\31\0\1\u0100"+
    "\46\0\1\u0101\50\0\1\u0102\65\0\1\u0103\66\0\1\u0104"+
    "\24\0\1\u0105\70\0\1\u0106\34\0\1\u0107\54\0\1\u0108"+
    "\50\0\1\u0109\53\0\1\u010a\77\0\1\u010b\40\0\1\u010c"+
    "\36\0\1\u010d\57\0\1\u010e\63\0\1\u010f\35\0\1\u0110"+
    "\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9374];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\12\1\2\11\14\1\4\11\4\1\2\0"+
    "\12\1\2\0\13\1\1\11\2\1\4\11\1\0\13\1"+
    "\1\11\10\1\1\0\6\1\1\0\12\1\2\0\4\1"+
    "\11\0\2\1\2\0\2\1\3\0\4\1\4\0\1\11"+
    "\4\0\2\1\3\0\1\1\4\0\1\1\5\0\1\11"+
    "\2\0\1\11\1\1\4\0\1\1\6\0\2\11\5\0"+
    "\1\11\4\0\1\11\2\0\1\1\7\0\1\11\4\0"+
    "\1\11\3\0\1\11\1\1\2\0\1\11\2\0\1\11"+
    "\6\0\2\11\15\0\2\11\1\0\1\11\7\0\1\11"+
    "\10\0\1\11\3\0\1\11\1\0\1\11\2\0\1\11"+
    "\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static GUI _gui;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return new Symbol(sym.SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 61: break;
        case 41: 
          { return new Symbol(sym.END_MAIN,yyline,yycolumn,yytext());
          }
        case 62: break;
        case 11: 
          { return new Symbol(sym.OPDIV,yyline,yycolumn,yytext());
          }
        case 63: break;
        case 15: 
          { return new Symbol(sym.ID,yyline,yycolumn,yytext());
          }
        case 64: break;
        case 31: 
          { return new Symbol(sym.TRUE,yyline,yycolumn,yytext());
          }
        case 65: break;
        case 36: 
          { return new Symbol(sym.END_IF,yyline,yycolumn,yytext());
          }
        case 66: break;
        case 53: 
          { return new Symbol(sym.END_CASE_OPT,yyline,yycolumn,yytext());
          }
        case 67: break;
        case 42: 
          { return new Symbol(sym.CASE_OPT,yyline,yycolumn,yytext());
          }
        case 68: break;
        case 33: 
          { return new Symbol(sym.FALSE,yyline,yycolumn,yytext());
          }
        case 69: break;
        case 37: 
          { return new Symbol(sym.END_FOR,yyline,yycolumn,yytext());
          }
        case 70: break;
        case 45: 
          { return new Symbol(sym.CHAR_OPER,yyline,yycolumn,yytext());
          }
        case 71: break;
        case 13: 
          { return new Symbol(sym.OPREL_MAQ,yyline,yycolumn,yytext());
          }
        case 72: break;
        case 44: 
          { return new Symbol(sym.END_WHILE,yyline,yycolumn,yytext());
          }
        case 73: break;
        case 46: 
          { return new Symbol(sym.PROCEDURE,yyline,yycolumn,yytext());
          }
        case 74: break;
        case 4: 
          { return new Symbol(sym.COMA,yyline,yycolumn,yytext());
          }
        case 75: break;
        case 48: 
          { return new Symbol(sym.BOOL_OPER,yyline,yycolumn,yytext());
          }
        case 76: break;
        case 3: 
          { return new Symbol(sym.NUM,yyline,yycolumn,yytext());
          }
        case 77: break;
        case 32: 
          { return new Symbol(sym.MAIN,yyline,yycolumn,yytext());
          }
        case 78: break;
        case 40: 
          { return new Symbol(sym.IF_THEN,yyline,yycolumn,yytext());
          }
        case 79: break;
        case 9: 
          { return new Symbol(sym.PAR_DER,yyline,yycolumn,yytext());
          }
        case 80: break;
        case 27: 
          { return new Symbol(sym.CHAR,yyline,yycolumn,yytext());
          }
        case 81: break;
        case 56: 
          { return new Symbol(sym.END_SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 82: break;
        case 5: 
          { return new Symbol(sym.PCOMA,yyline,yycolumn,yytext());
          }
        case 83: break;
        case 25: 
          { return new Symbol(sym.AND,yyline,yycolumn,yytext());
          }
        case 84: break;
        case 6: 
          { return new Symbol(sym.OPSUM,yyline,yycolumn,yytext());
          }
        case 85: break;
        case 57: 
          { return new Symbol(sym.BEGIN_PROCEDURE,yyline,yycolumn,yytext());
          }
        case 86: break;
        case 59: 
          { return new Symbol(sym.BEGIN_SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 87: break;
        case 20: 
          { return new Symbol(sym.OPREL_MEI,yyline,yycolumn,yytext());
          }
        case 88: break;
        case 26: 
          { return new Symbol(sym.NOT,yyline,yycolumn,yytext());
          }
        case 89: break;
        case 16: 
          { return new Symbol(sym.OR,yyline,yycolumn,yytext());
          }
        case 90: break;
        case 1: 
          { ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + (yycolumn + 1) + "; No se reconoce el simbolo: " + yytext());
	    ALexico._gui.selectorLinea.HighLightLine(yyline);
          }
        case 91: break;
        case 49: 
          { return new Symbol(sym.DOUBLE_NUM,yyline,yycolumn,yytext());
          }
        case 92: break;
        case 60: 
          { return new Symbol(sym.END_DEFAULT_CASE,yyline,yycolumn,yytext());
          }
        case 93: break;
        case 55: 
          { return new Symbol(sym.BEGIN_CASE_OPT,yyline,yycolumn,yytext());
          }
        case 94: break;
        case 51: 
          { return new Symbol(sym.BEGIN_WHILE,yyline,yycolumn,yytext());
          }
        case 95: break;
        case 8: 
          { return new Symbol(sym.PAR_IZQ,yyline,yycolumn,yytext());
          }
        case 96: break;
        case 35: 
          { return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
          }
        case 97: break;
        case 18: 
          { return new Symbol(sym.INCREMENTADORES, yyline, yycolumn, yytext());
          }
        case 98: break;
        case 39: 
          { return new Symbol(sym.INT_NUM,yyline,yycolumn,yytext());
          }
        case 99: break;
        case 58: 
          { return new Symbol(sym.DEFAULT_CASE,yyline,yycolumn,yytext());
          }
        case 100: break;
        case 7: 
          { return new Symbol(sym.OPRES,yyline,yycolumn,yytext());
          }
        case 101: break;
        case 47: 
          { return new Symbol(sym.BEGIN_FOR,yyline,yycolumn,yytext());
          }
        case 102: break;
        case 17: 
          { return new Symbol(sym.IF,yyline,yycolumn,yytext());
          }
        case 103: break;
        case 30: 
          { return new Symbol(sym.READ,yyline,yycolumn,yytext());
          }
        case 104: break;
        case 21: 
          { return new Symbol(sym.OPREL_MAI,yyline,yycolumn,yytext());
          }
        case 105: break;
        case 54: 
          { return new Symbol(sym.END_PROCEDURE,yyline,yycolumn,yytext());
          }
        case 106: break;
        case 50: 
          { return new Symbol(sym.CHAR_ARRAY,yyline,yycolumn,yytext());
          }
        case 107: break;
        case 38: 
          { return new Symbol(sym.ELSE_IF,yyline,yycolumn,yytext());
          }
        case 108: break;
        case 28: 
          { return new Symbol(sym.STRING,yyline,yycolumn,yytext());
          }
        case 109: break;
        case 14: 
          { return new Symbol(sym.ASIG,yyline,yycolumn,yytext());
          }
        case 110: break;
        case 29: 
          { return new Symbol(sym.FOR,yyline,yycolumn,yytext());
          }
        case 111: break;
        case 23: 
          { return new Symbol(sym.DOUBLE,yyline,yycolumn,yytext());
          }
        case 112: break;
        case 34: 
          { return new Symbol(sym.WRITE,yyline,yycolumn,yytext());
          }
        case 113: break;
        case 24: 
          { return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
          }
        case 114: break;
        case 10: 
          { return new Symbol(sym.OPMULT,yyline,yycolumn,yytext());
          }
        case 115: break;
        case 43: 
          { return new Symbol(sym.WRITE_LN,yyline,yycolumn,yytext());
          }
        case 116: break;
        case 19: 
          { return new Symbol(sym.OPREL_DIST,yyline,yycolumn,yytext());
          }
        case 117: break;
        case 12: 
          { return new Symbol(sym.OPREL_MEQ,yyline,yycolumn,yytext());
          }
        case 118: break;
        case 22: 
          { return new Symbol(sym.IGUAL,yyline,yycolumn,yytext());
          }
        case 119: break;
        case 2: 
          { 
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return new Symbol(sym.EOF,yyline,yycolumn,yytext());
            }
            case 273: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ALexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ALexico scanner = null;
        try {
          scanner = new ALexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
