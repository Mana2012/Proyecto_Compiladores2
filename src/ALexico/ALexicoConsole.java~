/* The following code was generated by JFlex 1.4.3 on 02-22-15 09:31 PM */

package ALexico;
import ASintactico.sym;
import java.io.FileWriter;
import java.io.PrintWriter;
import ALexico.Token;
import GUI.GUI;
import java.util.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02-22-15 09:31 PM from the specification file
 * <tt>C:/Users/DELL/Documents/proyecto_compiladores/src/ALexico/ALexicoConsole.flex</tt>
 */
public class ALexicoConsole extends sym{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMENTARIO_DOS = 6;
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 4;
  public static final int CHAR_ARRAY = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\2\0\1\2\22\0\1\2\2\0\1\34\1\0"+
    "\1\14\1\0\1\41\1\46\1\44\1\43\1\52\1\36\1\53\1\40"+
    "\1\33\1\3\11\5\1\0\1\37\1\55\1\51\1\56\2\0\1\6"+
    "\1\25\1\15\1\10\1\21\1\27\1\26\1\16\1\24\2\4\1\31"+
    "\1\23\1\7\1\11\1\20\1\4\1\13\1\32\1\12\1\30\1\54"+
    "\1\35\1\4\1\22\1\4\1\47\1\0\1\50\1\0\1\17\1\0"+
    "\1\6\1\25\1\15\1\10\1\21\1\27\1\26\1\16\1\24\2\4"+
    "\1\31\1\23\1\7\1\11\1\20\1\4\1\13\1\32\1\12\1\30"+
    "\1\54\1\35\1\4\1\22\1\4\1\42\1\0\1\45\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\3\15\4\1\5"+
    "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\3\2\1\27\1\30\3\4\1\31\1\4"+
    "\1\32\12\4\1\33\7\4\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\4\1\45\1\46"+
    "\10\4\1\47\1\4\1\0\3\4\1\50\4\4\1\51"+
    "\1\4\1\52\2\4\1\0\1\4\1\53\2\0\6\4"+
    "\1\54\16\0\1\4\1\55\1\4\1\56\1\57\7\0"+
    "\1\60\10\0\1\4\10\0\1\61\2\0\1\62\1\63"+
    "\1\64\11\0\1\65\4\0\1\66\11\0\1\67\2\0"+
    "\1\70\3\0\1\71\1\72\3\0\1\73\3\0\1\74"+
    "\5\0\1\75\11\0\1\76\1\0\1\77\6\0\1\100"+
    "\4\0\1\101\1\0\1\102\2\0\1\103\1\104\2\0"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\274\0\353\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\274\0\u03ac"+
    "\0\274\0\274\0\274\0\274\0\274\0\274\0\274\0\u03db"+
    "\0\274\0\274\0\274\0\274\0\274\0\u040a\0\u0439\0\274"+
    "\0\274\0\u0468\0\u0497\0\u04c6\0\274\0\274\0\u04f5\0\u0524"+
    "\0\u0553\0\353\0\u0582\0\353\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\274\0\274"+
    "\0\274\0\274\0\274\0\274\0\274\0\274\0\353\0\u08ff"+
    "\0\353\0\353\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\353\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\353\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\353\0\u0c4d\0\353"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\353\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\353\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\353\0\u1171\0\u11a0"+
    "\0\353\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\274\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\274\0\u1637\0\u1666\0\274\0\274\0\274"+
    "\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de"+
    "\0\u180d\0\274\0\u183c\0\u186b\0\u189a\0\u18c9\0\274\0\u18f8"+
    "\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70"+
    "\0\274\0\u1a9f\0\u1ace\0\274\0\u1afd\0\u1b2c\0\u1b5b\0\274"+
    "\0\274\0\u1b8a\0\u1bb9\0\u1be8\0\274\0\u1c17\0\u1c46\0\u1c75"+
    "\0\274\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\274\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\274\0\u1f36\0\274\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021"+
    "\0\u2050\0\274\0\u207f\0\u20ae\0\u20dd\0\u210c\0\274\0\u213b"+
    "\0\274\0\u216a\0\u2199\0\274\0\274\0\u21c8\0\u21f7\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\5\1\20\1\10\1\5\1\10"+
    "\1\21\1\10\1\22\1\23\1\24\1\10\1\25\2\10"+
    "\1\26\1\27\1\5\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\5\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\10\1\46\1\47\41\50\1\51\15\50"+
    "\1\6\1\50\12\6\1\52\16\6\1\53\1\54\5\6"+
    "\1\55\2\6\1\56\12\6\1\50\31\6\1\53\1\54"+
    "\22\6\62\0\11\10\1\0\2\10\1\0\13\10\2\0"+
    "\1\10\16\0\1\10\5\0\1\11\1\10\1\11\6\10"+
    "\1\0\2\10\1\0\13\10\2\0\1\10\16\0\1\10"+
    "\5\0\4\10\1\57\3\10\1\60\1\0\2\10\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\5\0\6\10\1\61"+
    "\2\10\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\6\10\1\62\2\10\1\0\2\10\1\0"+
    "\4\10\1\63\6\10\2\0\1\10\16\0\1\10\5\0"+
    "\10\10\1\64\1\0\2\10\1\0\13\10\2\0\1\10"+
    "\16\0\1\10\5\0\10\10\1\65\1\0\1\10\1\66"+
    "\1\0\13\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\1\10\1\67\11\10\2\0\1\10"+
    "\16\0\1\10\5\0\3\10\1\70\5\10\1\0\1\10"+
    "\1\71\1\0\13\10\2\0\1\10\16\0\1\10\5\0"+
    "\4\10\1\72\4\10\1\0\2\10\1\0\11\10\1\73"+
    "\1\10\2\0\1\10\16\0\1\10\5\0\3\10\1\74"+
    "\2\10\1\75\2\10\1\0\2\10\1\0\13\10\2\0"+
    "\1\10\16\0\1\10\5\0\4\10\1\76\4\10\1\0"+
    "\2\10\1\0\7\10\1\77\3\10\2\0\1\10\16\0"+
    "\1\10\5\0\6\10\1\100\2\10\1\0\2\10\1\0"+
    "\1\10\1\101\11\10\2\0\1\10\16\0\1\10\5\0"+
    "\3\10\1\102\2\10\1\103\2\10\1\0\2\10\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\0\1\10\1\104\11\10\2\0\1\10\16\0"+
    "\1\10\5\0\10\10\1\105\1\0\1\10\1\106\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\45\0\1\107\64\0"+
    "\1\110\4\0\1\111\51\0\1\112\15\0\1\113\4\0"+
    "\1\114\75\0\1\115\55\0\1\116\26\0\5\10\1\117"+
    "\3\10\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\10\10\1\120\1\0\2\10\1\0\13\10"+
    "\2\0\1\10\16\0\1\10\5\0\7\10\1\121\1\10"+
    "\1\0\2\10\1\0\13\10\2\0\1\10\16\0\1\10"+
    "\5\0\11\10\1\0\2\10\1\0\13\10\2\0\1\10"+
    "\16\0\1\122\5\0\11\10\1\0\2\10\1\0\10\10"+
    "\1\123\2\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\1\10\1\124\11\10\2\0\1\10"+
    "\16\0\1\10\5\0\3\10\1\125\5\10\1\0\2\10"+
    "\1\0\13\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\12\10\1\126\2\0\1\10\16\0"+
    "\1\10\5\0\3\10\1\127\5\10\1\0\2\10\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\5\0\5\10\1\130"+
    "\3\10\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\0\12\10\1\131"+
    "\2\0\1\10\16\0\1\10\5\0\11\10\1\0\2\10"+
    "\1\0\4\10\1\132\6\10\2\0\1\10\16\0\1\10"+
    "\5\0\5\10\1\133\3\10\1\0\2\10\1\0\13\10"+
    "\2\0\1\10\16\0\1\10\5\0\7\10\1\134\1\10"+
    "\1\0\2\10\1\0\13\10\2\0\1\10\16\0\1\10"+
    "\5\0\11\10\1\0\2\10\1\135\13\10\2\0\1\10"+
    "\16\0\1\10\5\0\6\10\1\136\2\10\1\0\2\10"+
    "\1\0\13\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\6\10\1\137\4\10\2\0\1\10"+
    "\16\0\1\10\5\0\11\10\1\0\2\10\1\0\11\10"+
    "\1\140\1\10\2\0\1\10\16\0\1\10\5\0\10\10"+
    "\1\141\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\0\11\10\1\142"+
    "\1\10\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\0\4\10\1\143\6\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\0\4\10\1\144"+
    "\6\10\2\0\1\10\16\0\1\10\5\0\3\10\1\145"+
    "\5\10\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\0\1\10\1\146"+
    "\11\10\2\0\1\10\16\0\1\10\5\0\4\10\1\147"+
    "\4\10\1\0\2\10\1\0\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\5\10\1\150\3\10\1\0\2\10\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\0\1\10\1\151\11\10\2\0\1\10\16\0"+
    "\1\10\5\0\10\10\1\152\1\0\2\10\1\0\13\10"+
    "\2\0\1\10\16\0\1\10\5\0\11\10\1\0\2\10"+
    "\1\153\13\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\1\10\1\154\11\10\2\0\1\10"+
    "\16\0\1\10\5\0\4\10\1\155\4\10\1\0\2\10"+
    "\1\0\13\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\156\13\10\2\0\1\10\16\0\1\10"+
    "\14\0\1\157\47\0\11\10\1\0\2\10\1\0\11\10"+
    "\1\160\1\10\2\0\1\10\16\0\1\10\5\0\11\10"+
    "\1\0\2\10\1\0\4\10\1\161\6\10\2\0\1\10"+
    "\16\0\1\10\5\0\11\10\1\0\2\10\1\0\12\10"+
    "\1\162\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\0\1\10\1\163\11\10\2\0\1\10\16\0"+
    "\1\10\5\0\7\10\1\164\1\10\1\0\2\10\1\0"+
    "\13\10\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\0\11\10\1\165\1\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\0\2\10\1\166"+
    "\10\10\2\0\1\10\16\0\1\10\5\0\11\10\1\0"+
    "\2\10\1\167\13\10\2\0\1\10\16\0\1\10\5\0"+
    "\11\10\1\0\2\10\1\170\13\10\2\0\1\10\16\0"+
    "\1\10\5\0\11\10\1\0\2\10\1\171\13\10\2\0"+
    "\1\10\16\0\1\10\17\0\1\172\2\0\1\173\2\0"+
    "\1\174\1\175\2\0\1\176\2\0\1\177\2\0\1\200"+
    "\24\0\11\10\1\0\2\10\1\201\13\10\2\0\1\10"+
    "\16\0\1\10\11\0\1\202\65\0\1\203\43\0\11\10"+
    "\1\0\2\10\1\204\13\10\2\0\1\10\16\0\1\10"+
    "\5\0\4\10\1\205\4\10\1\0\2\10\1\0\13\10"+
    "\2\0\1\10\16\0\1\10\5\0\11\10\1\0\2\10"+
    "\1\0\1\10\1\206\11\10\2\0\1\10\16\0\1\10"+
    "\5\0\11\10\1\0\1\207\1\10\1\0\13\10\2\0"+
    "\1\10\16\0\1\10\5\0\11\10\1\0\2\10\1\0"+
    "\1\10\1\210\11\10\2\0\1\10\16\0\1\10\5\0"+
    "\11\10\1\0\2\10\1\0\1\10\1\211\11\10\2\0"+
    "\1\10\16\0\1\10\22\0\1\212\47\0\1\213\53\0"+
    "\1\214\2\0\1\215\53\0\1\216\63\0\1\217\51\0"+
    "\1\220\77\0\1\221\40\0\1\222\66\0\1\223\53\0"+
    "\1\224\64\0\1\225\62\0\1\226\47\0\1\227\46\0"+
    "\1\230\50\0\11\10\1\0\2\10\1\231\13\10\2\0"+
    "\1\10\16\0\1\10\5\0\7\10\1\232\1\10\1\0"+
    "\2\10\1\0\13\10\2\0\1\10\16\0\1\10\5\0"+
    "\11\10\1\0\2\10\1\233\13\10\2\0\1\10\16\0"+
    "\1\10\15\0\1\234\63\0\1\235\51\0\1\236\63\0"+
    "\1\237\70\0\1\240\35\0\1\241\71\0\1\242\45\0"+
    "\1\243\74\0\1\244\51\0\1\245\61\0\1\246\52\0"+
    "\1\247\42\0\1\250\67\0\1\251\53\0\1\252\2\0"+
    "\1\253\2\0\1\254\3\0\1\255\2\0\1\256\27\0"+
    "\11\10\1\0\2\10\1\257\13\10\2\0\1\10\16\0"+
    "\1\10\33\0\1\260\36\0\1\261\57\0\1\262\57\0"+
    "\1\263\64\0\1\264\56\0\1\265\52\0\1\266\50\0"+
    "\1\267\70\0\1\270\66\0\1\271\46\0\1\272\43\0"+
    "\1\273\63\0\1\274\51\0\1\275\61\0\1\276\66\0"+
    "\1\277\52\0\1\300\50\0\1\301\64\0\1\302\47\0"+
    "\1\303\63\0\1\304\62\0\1\305\60\0\1\306\52\0"+
    "\1\307\62\0\1\310\50\0\1\311\75\0\1\312\35\0"+
    "\1\313\71\0\1\314\45\0\1\315\74\0\1\316\33\0"+
    "\1\317\71\0\1\320\57\0\1\321\45\0\1\322\55\0"+
    "\1\323\60\0\1\324\65\0\1\325\52\0\1\326\50\0"+
    "\1\327\70\0\1\330\67\0\1\331\34\0\1\332\66\0"+
    "\1\333\66\0\1\334\45\0\1\335\56\0\1\336\60\0"+
    "\1\337\52\0\1\340\62\0\1\341\65\0\1\342\40\0"+
    "\1\343\57\0\1\344\60\0\1\345\52\0\1\346\55\0"+
    "\1\347\60\0\1\350\57\0\1\351\64\0\1\352\43\0"+
    "\1\353\70\0\1\354\66\0\1\355\45\0\1\356\60\0"+
    "\1\357\67\0\1\360\36\0\1\361\57\0\1\362\60\0"+
    "\1\363\62\0\1\364\56\0\1\365\43\0\1\366\102\0"+
    "\1\367\45\0\1\370\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8742];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\20\1\1\11\1\1\7\11\1\1\5\11"+
    "\2\1\2\11\3\1\2\11\30\1\10\11\16\1\1\0"+
    "\15\1\1\0\2\1\2\0\7\1\16\0\5\1\7\0"+
    "\1\11\10\0\1\1\10\0\1\11\2\0\3\11\11\0"+
    "\1\11\4\0\1\11\11\0\1\11\2\0\1\11\3\0"+
    "\2\11\3\0\1\11\3\0\1\11\5\0\1\11\11\0"+
    "\1\11\1\0\1\11\6\0\1\11\4\0\1\11\1\0"+
    "\1\11\2\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static GUI _gui;
  private int coment_uno = 0,coment_dos = 0;
  public static String string_leido = "";
  public static boolean endoffile = false;
  public static boolean writestringd = false;
  public static boolean writestringc = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexicoConsole(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexicoConsole(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return new Token(sym.WRITE,yytext(),yycolumn,yyline);
          }
        case 70: break;
        case 63: 
          { return new Token(sym.END_CASE_OPT,yytext(),yycolumn,yyline);
          }
        case 71: break;
        case 53: 
          { return new Token(sym.CASE_OPT,yytext(),yycolumn,yyline);
          }
        case 72: break;
        case 22: 
          { yybegin(YYINITIAL);
				 if( writestringc )
					return new Token(sym.CADENAC,yytext(),yycolumn,yyline);
				 if( writestringd )
					return new Token(sym.CADENAD,yytext(),yycolumn,yyline);
				 else
					return new Token(sym.CADENA,yytext(),yycolumn,yyline);
          }
        case 73: break;
        case 27: 
          { return new Token(sym.IF,yytext(),yycolumn,yyline);
          }
        case 74: break;
        case 50: 
          { return new Token(sym.ELSE_IF,yytext(),yycolumn,yyline);
          }
        case 75: break;
        case 15: 
          { return new Token(sym.BRA_DER,yytext(),yycolumn,yyline);
          }
        case 76: break;
        case 43: 
          { return new Token(sym.MAIN,yytext(),yycolumn,yyline);
          }
        case 77: break;
        case 19: 
          { return new Token(sym.OPREL_MEQ,yytext(),yycolumn,yyline);
          }
        case 78: break;
        case 6: 
          { return new Token(sym.COMA,yytext(),yycolumn,yyline);
          }
        case 79: break;
        case 5: 
          { return new Token(sym.OPDIV,yytext(),yycolumn,yyline);
          }
        case 80: break;
        case 64: 
          { return new Token(sym.END_PROCEDURE,yytext(),yycolumn,yyline);
          }
        case 81: break;
        case 69: 
          { return new Token(sym.BEGIN_SELECT_CASE,yytext(),yycolumn,yyline);
          }
        case 82: break;
        case 40: 
          { return new Token(sym.FOR,yytext(),yycolumn,yyline);
          }
        case 83: break;
        case 45: 
          { return new Token(sym.FALSE,yytext(),yycolumn,yyline);
          }
        case 84: break;
        case 34: 
          { this.coment_dos++;
          }
        case 85: break;
        case 33: 
          { if( writestringc )
					{
                                            ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + 
						", columna " + (yycolumn + 1) + "; Solo puede haber un %c dentro de en un String"); 
                                            ALexico._gui.selectorLinea.HighLightLine(yyline);
                                            //Compilador.Compilador.Error_Count++;
					}
					if( writestringd )
					{
                                            ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + 
                                            	", columna " + (yycolumn + 1) + "; Solo puede haber un caracter de escape dentro de en un String"); 
                                            ALexico._gui.selectorLinea.HighLightLine(yyline);
                                            //Compilador.Compilador.Error_Count++;
					}
					writestringc = true;
                    string_leido += yytext();
          }
        case 86: break;
        case 8: 
          { return new Token(sym.PUNTO,yytext(),yycolumn,yyline);
          }
        case 87: break;
        case 14: 
          { return new Token(sym.BRA_IZQ,yytext(),yycolumn,yyline);
          }
        case 88: break;
        case 44: 
          { return new Token(sym.ARRAY,yytext(),yycolumn,yyline);
          }
        case 89: break;
        case 65: 
          { return new Token(sym.THEN_PROCEDURE,yytext(),yycolumn,yyline);
          }
        case 90: break;
        case 21: 
          { System.out.print(yytext());
          }
        case 91: break;
        case 56: 
          { return new Token(sym.CHAR_OPER,yytext(),yycolumn,yyline);
          }
        case 92: break;
        case 39: 
          { return new Token(sym.OPMOD,yytext(),yycolumn,yyline);
          }
        case 93: break;
        case 20: 
          { return new Token(sym.OPREL_MAQ,yytext(),yycolumn,yyline);
          }
        case 94: break;
        case 10: 
          { ALexico._gui.Write( "Comentario = /#" );
                    this.coment_uno++;
			yybegin(COMENTARIO);
          }
        case 95: break;
        case 57: 
          { return new Token(sym.END_WHILE,yytext(),yycolumn,yyline);
          }
        case 96: break;
        case 4: 
          { return new Token(sym.ID,yytext(),yycolumn,yyline);
          }
        case 97: break;
        case 67: 
          { return new Token(sym.END_SELECT_CASE,yytext(),yycolumn,yyline);
          }
        case 98: break;
        case 68: 
          { return new Token(sym.BEGIN_PROCEDURE,yytext(),yycolumn,yyline);
          }
        case 99: break;
        case 58: 
          { return new Token(sym.BOOL_OPER,yytext(),yycolumn,yyline);
          }
        case 100: break;
        case 66: 
          { return new Token(sym.BEGIN_CASE_OPT,yytext(),yycolumn,yyline);
          }
        case 101: break;
        case 25: 
          { return new Token(sym.DO,yytext(),yycolumn,yyline);
          }
        case 102: break;
        case 7: 
          { return new Token(sym.PCOMA,yytext(),yycolumn,yyline);
          }
        case 103: break;
        case 17: 
          { return new Token(sym.OPSUM,yytext(),yycolumn,yyline);
          }
        case 104: break;
        case 35: 
          { this.coment_dos--;
	             if( this.coment_dos == 0 )
			         yybegin(YYINITIAL);
          }
        case 105: break;
        case 60: 
          { return new Token(sym.CHAR_ARRAY,yytext(),yycolumn,yyline);
          }
        case 106: break;
        case 61: 
          { return new Token(sym.BEGIN_MAIN,yytext(),yycolumn,yyline);
          }
        case 107: break;
        case 49: 
          { return new Token(sym.END_FOR,yytext(),yycolumn,yyline);
          }
        case 108: break;
        case 1: 
          { ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + (yycolumn + 1) + "; No se reconoce el simbolo: " + yytext());
	    ALexico._gui.selectorLinea.HighLightLine(yyline);
          }
        case 109: break;
        case 42: 
          { return new Token(sym.READ,yytext(),yycolumn,yyline);
          }
        case 110: break;
        case 9: 
          { ALexico._gui.Write( "String = \"" );
	            string_leido = "";
                        writestringc = false;
                        writestringd = false;
			yybegin(CHAR_ARRAY);
          }
        case 111: break;
        case 16: 
          { return new Token(sym.ASIG,yytext(),yycolumn,yyline);
          }
        case 112: break;
        case 32: 
          { if( writestringd )
					{
                                            ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + 
						", columna " + (yycolumn + 1) + "; Solo puede haber un %d dentro de en un String"); 
                                            ALexico._gui.selectorLinea.HighLightLine(yyline);
                                            //Compilador.Compilador.Error_Count++;
					}
					if( writestringc )
					{
                                            ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + 
						", columna " + (yycolumn + 1) + "; Solo puede haber un caracter de escape dentro de en un String"); 
                                            ALexico._gui.selectorLinea.HighLightLine(yyline);
                                            //Compilador.Compilador.Error_Count++;
					}
					writestringd = true;
                    string_leido += yytext();
          }
        case 113: break;
        case 29: 
          { return new Token(sym.OPREL_MEI,yytext(),yycolumn,yyline);
          }
        case 114: break;
        case 47: 
          { return new Token(sym.WHILE,yytext(),yycolumn,yyline);
          }
        case 115: break;
        case 52: 
          { return new Token(sym.IF_THEN,yytext(),yycolumn,yyline);
          }
        case 116: break;
        case 3: 
          { return new Token(sym.NUM,yytext(),yycolumn,yyline);
          }
        case 117: break;
        case 62: 
          { return new Token(sym.SELECT_CASE,yytext(),yycolumn,yyline);
          }
        case 118: break;
        case 23: 
          { this.coment_uno++;
          }
        case 119: break;
        case 30: 
          { return new Token(sym.OPREL_DIST,yytext(),yycolumn,yyline);
          }
        case 120: break;
        case 28: 
          { ALexico._gui.Write( "Comentario = /#" );
	            this.coment_dos++;
                        yybegin(COMENTARIO_DOS);
          }
        case 121: break;
        case 38: 
          { return new Token(sym.OPDIV_T,yytext(),yycolumn,yyline);
          }
        case 122: break;
        case 12: 
          { return new Token(sym.PAR_DER,yytext(),yycolumn,yyline);
          }
        case 123: break;
        case 18: 
          { return new Token(sym.OPRES,yytext(),yycolumn,yyline);
          }
        case 124: break;
        case 36: 
          { return new Token(sym.AND,yytext(),yycolumn,yyline);
          }
        case 125: break;
        case 11: 
          { return new Token(sym.OPMULT,yytext(),yycolumn,yyline);
          }
        case 126: break;
        case 37: 
          { return new Token(sym.NOT,yytext(),yycolumn,yyline);
          }
        case 127: break;
        case 26: 
          { return new Token(sym.OR,yytext(),yycolumn,yyline);
          }
        case 128: break;
        case 59: 
          { return new Token(sym.BEGIN_FOR,yytext(),yycolumn,yyline);
          }
        case 129: break;
        case 55: 
          { return new Token(sym.WRITE_LN,yytext(),yycolumn,yyline);
          }
        case 130: break;
        case 24: 
          { this.coment_uno--;
	           if( this.coment_uno == 0 )
			yybegin(YYINITIAL);
          }
        case 131: break;
        case 41: 
          { return new Token(sym.TRUE,yytext(),yycolumn,yyline);
          }
        case 132: break;
        case 13: 
          { return new Token(sym.PAR_IZQ,yytext(),yycolumn,yyline);
          }
        case 133: break;
        case 31: 
          { return new Token(sym.OPREL_MAI,yytext(),yycolumn,yyline);
          }
        case 134: break;
        case 54: 
          { return new Token(sym.END_MAIN,yytext(),yycolumn,yyline);
          }
        case 135: break;
        case 48: 
          { return new Token(sym.END_IF,yytext(),yycolumn,yyline);
          }
        case 136: break;
        case 51: 
          { return new Token(sym.INT_NUM,yytext(),yycolumn,yyline);
          }
        case 137: break;
        case 2: 
          { 
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMENTARIO_DOS: {
              if( !endoffile ) {
			  ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + 
					(yycolumn + 1) + "; No se cerro el comentario: \" (* ... ? \" "); 
			  ALexico._gui.selectorLinea.HighLightLine(yyline);
			  //Compilador.Compilador.Error_Count++; 
                    }
			  endoffile = true;			
              return new Token(sym.EOF,yytext(),yycolumn,yyline);
            }
            case 249: break;
            case COMENTARIO: {
              if( !endoffile ) {
        ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + 
            (yycolumn + 1) + "; No se cerro el comentario: \" { ... ? \" "); 
        ALexico._gui.selectorLinea.HighLightLine(yyline);
        //Compilador.Compilador.Error_Count++; 
        }
        endoffile = true;
        return new Token(sym.EOF,yytext(),yycolumn,yyline);
            }
            case 250: break;
            case CHAR_ARRAY: {
              if( !endoffile ) {
			  ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + 
					(yycolumn + 1) + "; No se cerro el String: \" \' ... ? \" "); 
			  ALexico._gui.selectorLinea.HighLightLine(yyline);
			  //Compilador.Compilador.Error_Count++; 
                    }
			  endoffile = true;
			  return new Token(sym.EOF,yytext(),yycolumn,yyline);
            }
            case 251: break;
            default:
              { return new Token(sym.EOF,yytext(),yycolumn,yyline); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
        ALexicoConsole scanner = null;
        try {
          scanner = new ALexicoConsole( new java.io.FileReader("C:\\Users\\DELL\\Documents\\proyecto_compiladores\\temp_lex.txt"));
          while ( !scanner.zzAtEOF ){ 
              System.out.println(scanner.next_token());
          }
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
  }
}