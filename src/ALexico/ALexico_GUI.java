/* The following code was generated by JFlex 1.4.3 on 3/24/15 7:28 AM */

package ALexico;
import GUI.ColorPane;
import java.awt.Color;
import java.io.FileWriter;
import java.io.PrintWriter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/24/15 7:28 AM from the specification file
 * <tt>src/ALexico/ALexico_GUI.flex</tt>
 */
public class ALexico_GUI {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\2\0\1\2\22\0\1\2\1\0\1\20\4\0"+
    "\1\17\1\16\1\16\1\16\1\40\1\16\1\41\1\5\1\16\1\3"+
    "\11\6\1\0\1\16\1\42\1\37\1\43\2\0\1\12\1\27\1\21"+
    "\1\14\1\10\1\33\1\34\1\22\1\32\2\4\1\30\1\31\1\13"+
    "\1\15\1\25\1\4\1\7\1\35\1\11\1\26\1\4\1\36\1\4"+
    "\1\24\1\4\4\0\1\23\1\0\1\12\1\27\1\21\1\14\1\10"+
    "\1\33\1\34\1\22\1\32\2\4\1\30\1\31\1\13\1\15\1\25"+
    "\1\4\1\7\1\35\1\11\1\26\1\4\1\36\1\4\1\24\1\4"+
    "\1\44\1\0\1\45\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\7\1\1\4"+
    "\12\1\4\4\1\1\2\0\11\5\1\6\2\0\7\5"+
    "\1\6\5\5\1\0\1\7\1\3\5\5\2\10\7\5"+
    "\1\0\4\5\1\0\10\5\2\0\2\5\11\0\2\5"+
    "\2\0\2\5\3\0\1\5\1\6\4\0\1\6\3\0"+
    "\1\5\3\0\1\5\3\0\1\5\6\0\1\5\3\0"+
    "\1\5\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\46\0\114\0\162\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\46\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\114\0\u0402\0\162"+
    "\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"+
    "\0\162\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u01a2\0\u06fa\0\u0720\0\u0746"+
    "\0\u03dc\0\u03dc\0\u0402\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\46\0\u057e\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18"+
    "\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8"+
    "\0\u0efe\0\u0f24\0\u0f4a\0\46\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2"+
    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112"+
    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372"+
    "\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\5\1\2\1\5\1\22\1\5\1\23\1\5"+
    "\1\24\1\25\1\26\1\5\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\31\1\35\1\2\51\0\1\36\1\0"+
    "\1\37\1\36\42\0\2\40\1\0\10\40\3\0\2\40"+
    "\1\0\13\40\12\0\1\6\1\0\1\37\1\6\42\0"+
    "\2\40\1\0\2\40\1\41\5\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\5\40\1\42\2\40\3\0"+
    "\2\40\1\0\4\40\1\43\6\40\12\0\2\40\1\0"+
    "\1\40\1\44\6\40\3\0\2\40\1\0\13\40\12\0"+
    "\2\40\1\0\5\40\1\45\2\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\7\40\1\46\3\0\2\40"+
    "\1\0\13\40\12\0\2\40\1\0\2\40\1\47\4\40"+
    "\1\50\3\0\2\40\1\0\13\40\12\0\2\40\1\0"+
    "\1\40\1\51\6\40\3\0\2\40\1\0\13\40\13\0"+
    "\1\52\2\0\7\52\3\0\2\52\1\0\13\52\7\0"+
    "\1\53\1\0\44\53\3\0\2\40\1\0\4\40\1\54"+
    "\3\40\3\0\1\40\1\55\1\0\13\40\12\0\2\40"+
    "\1\0\1\40\1\56\6\40\3\0\2\40\1\0\13\40"+
    "\12\0\2\40\1\0\2\40\1\57\4\40\1\60\3\0"+
    "\2\40\1\0\13\40\12\0\2\40\1\0\4\40\1\61"+
    "\3\40\3\0\2\40\1\0\13\40\12\0\2\40\1\0"+
    "\5\40\1\62\2\40\3\0\2\40\1\0\7\40\1\63"+
    "\3\40\12\0\2\40\1\0\4\40\1\64\2\40\1\65"+
    "\3\0\2\40\1\0\13\40\12\0\2\40\1\0\2\40"+
    "\1\66\5\40\3\0\2\40\1\0\13\40\12\0\2\40"+
    "\1\0\1\40\1\67\6\40\3\0\1\40\1\70\1\0"+
    "\13\40\46\0\1\16\46\0\1\16\46\0\1\16\43\0"+
    "\1\16\3\0\1\16\2\0\1\71\1\0\43\71\1\72"+
    "\3\0\1\73\2\0\1\73\42\0\2\40\1\0\3\40"+
    "\1\51\1\45\3\40\3\0\2\40\1\0\13\40\12\0"+
    "\2\40\1\0\6\40\1\74\1\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\10\40\3\0\2\40\1\0"+
    "\11\40\1\75\1\40\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\0\2\40\1\76\10\40\12\0\2\40\1\0"+
    "\6\40\1\51\1\40\3\0\2\40\1\0\13\40\12\0"+
    "\2\40\1\0\3\40\1\51\4\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\10\40\3\0\2\40\1\0"+
    "\7\40\1\77\3\40\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\0\2\40\1\100\10\40\26\0\1\101\26\0"+
    "\1\53\1\0\16\53\1\102\25\53\3\0\2\40\1\0"+
    "\10\40\3\0\2\40\1\0\11\40\1\103\1\40\12\0"+
    "\2\40\1\0\4\40\1\104\3\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\7\40\1\105\3\0\2\40"+
    "\1\0\13\40\12\0\2\40\1\0\10\40\3\0\2\40"+
    "\1\0\10\40\1\106\2\40\12\0\2\40\1\0\7\40"+
    "\1\107\3\0\2\40\1\0\13\40\12\0\2\40\1\0"+
    "\10\40\3\0\2\40\1\0\6\40\1\110\4\40\12\0"+
    "\2\40\1\0\3\40\1\111\4\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\10\40\3\0\2\40\1\112"+
    "\13\40\12\0\2\40\1\0\10\40\3\0\2\40\1\0"+
    "\4\40\1\113\6\40\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\0\4\40\1\114\6\40\12\0\2\40\1\0"+
    "\10\40\3\0\2\40\1\0\6\40\1\115\4\40\12\0"+
    "\2\40\1\0\10\40\3\0\2\40\1\0\6\40\1\116"+
    "\4\40\12\0\2\40\1\0\10\40\3\0\2\40\1\117"+
    "\13\40\12\0\2\40\1\0\2\40\1\120\5\40\3\0"+
    "\2\40\1\0\13\40\12\0\2\40\1\0\2\40\1\51"+
    "\5\40\3\0\2\40\1\0\13\40\12\0\2\40\1\0"+
    "\4\40\1\121\3\40\3\0\2\40\1\0\13\40\12\0"+
    "\2\40\1\0\10\40\3\0\2\40\1\0\3\40\1\122"+
    "\7\40\12\0\2\40\1\0\2\40\1\123\5\40\3\0"+
    "\2\40\1\0\13\40\12\0\2\40\1\0\1\40\1\124"+
    "\6\40\3\0\2\40\1\0\13\40\12\0\2\40\1\0"+
    "\10\40\3\0\1\125\1\40\1\0\13\40\12\0\2\40"+
    "\1\0\10\40\3\0\2\40\1\0\6\40\1\126\4\40"+
    "\12\0\2\40\1\0\10\40\3\0\2\40\1\0\4\40"+
    "\1\127\6\40\12\0\2\40\1\0\5\40\1\51\2\40"+
    "\3\0\2\40\1\0\13\40\12\0\2\40\1\0\10\40"+
    "\3\0\2\40\1\130\13\40\20\0\1\131\37\0\2\40"+
    "\1\0\10\40\3\0\2\40\1\0\11\40\1\76\1\40"+
    "\12\0\2\40\1\0\2\40\1\132\5\40\3\0\2\40"+
    "\1\0\13\40\12\0\2\40\1\0\3\40\1\133\4\40"+
    "\3\0\2\40\1\0\13\40\12\0\2\40\1\0\10\40"+
    "\3\0\2\40\1\0\4\40\1\76\6\40\23\0\1\134"+
    "\4\0\1\135\3\0\1\136\3\0\1\137\1\140\1\141"+
    "\1\0\1\142\1\143\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\144\13\40\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\0\2\40\1\145\10\40\12\0\2\40\1\0"+
    "\10\40\3\0\2\40\1\0\4\40\1\146\6\40\12\0"+
    "\2\40\1\0\10\40\3\0\2\40\1\147\13\40\12\0"+
    "\2\40\1\0\10\40\3\0\2\40\1\150\13\40\12\0"+
    "\2\40\1\0\2\40\1\151\5\40\3\0\2\40\1\0"+
    "\13\40\12\0\2\40\1\0\5\40\1\152\2\40\3\0"+
    "\2\40\1\0\13\40\12\0\2\40\1\0\10\40\3\0"+
    "\2\40\1\153\13\40\22\0\1\154\54\0\1\155\26\0"+
    "\2\40\1\0\10\40\3\0\1\156\1\40\1\0\13\40"+
    "\12\0\2\40\1\0\2\40\1\157\5\40\3\0\2\40"+
    "\1\0\13\40\17\0\1\160\47\0\1\161\42\0\1\162"+
    "\50\0\1\163\66\0\1\164\27\0\1\165\40\0\1\166"+
    "\57\0\1\167\55\0\1\140\16\0\2\40\1\0\10\40"+
    "\3\0\2\40\1\0\4\40\1\170\6\40\12\0\2\40"+
    "\1\0\2\40\1\111\5\40\3\0\2\40\1\0\13\40"+
    "\24\0\1\171\42\0\1\172\2\0\1\173\33\0\2\40"+
    "\1\0\6\40\1\174\1\40\3\0\2\40\1\0\13\40"+
    "\12\0\2\40\1\0\10\40\3\0\2\40\1\175\13\40"+
    "\24\0\1\173\56\0\1\176\27\0\1\177\40\0\2\40"+
    "\1\0\3\40\1\200\4\40\3\0\2\40\1\0\13\40"+
    "\12\0\2\40\1\0\10\40\3\0\2\40\1\201\13\40"+
    "\42\0\1\202\47\0\1\203\25\0\1\204\62\0\1\177"+
    "\22\0\1\164\66\0\1\205\47\0\1\206\16\0\2\40"+
    "\1\0\3\40\1\207\4\40\3\0\2\40\1\0\13\40"+
    "\34\0\1\210\27\0\1\211\63\0\1\212\23\0\2\40"+
    "\1\0\10\40\3\0\2\40\1\0\2\40\1\213\10\40"+
    "\30\0\1\135\3\0\1\136\5\0\1\141\1\0\1\142"+
    "\1\143\40\0\1\164\27\0\1\164\35\0\2\40\1\0"+
    "\10\40\3\0\2\40\1\214\13\40\37\0\1\177\27\0"+
    "\1\215\43\0\1\216\56\0\1\217\34\0\1\220\65\0"+
    "\1\221\20\0\2\40\1\0\10\40\3\0\2\40\1\222"+
    "\13\40\20\0\1\164\43\0\1\223\46\0\1\165\40\0"+
    "\2\40\1\0\1\40\1\76\6\40\3\0\2\40\1\0"+
    "\13\40\30\0\1\224\52\0\1\225\42\0\1\147\32\0"+
    "\1\226\56\0\1\227\34\0\1\164\56\0\1\135\36\0"+
    "\1\230\45\0\1\231\63\0\1\232\31\0\1\233\42\0"+
    "\1\234\60\0\1\164\56\0\1\221\21\0\1\235\62\0"+
    "\1\236\42\0\1\214\45\0\1\222\31\0\1\221\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5548];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\12\1\1\11\17\1\2\0\12\1\2\0"+
    "\15\1\1\0\7\1\1\11\10\1\1\0\4\1\1\0"+
    "\10\1\2\0\2\1\11\0\2\1\2\0\2\1\3\0"+
    "\2\1\4\0\1\11\3\0\1\1\3\0\1\1\3\0"+
    "\1\1\6\0\1\1\3\0\1\1\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	ColorPane texto_formato = new ColorPane();
	public static Color texto_reserv = new Color(25,25,112),
				  texto_normal = Color.black,
				  texto_string = new Color(0,100,0),
				  texto_comment = Color.CYAN,
				  texto_const = Color.magenta,
                                  texto_id = new Color(153,50,204),
				  texto_raro = Color.red,
                                  select_highlight = Color.cyan,
                                  fondo = Color.lightGray,
                                  error_highlight = Color.red;
		  
   public static ColorPane getPane(String texto) {
      ColorPane pane = null;
      String argv[] = new String[1];
    String converted = "";
    argv[0] = "temp_lex.txt";

    FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter(argv[0]);
            pw = new PrintWriter(fichero);

            pw.print(texto);
            pw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }


    if (argv.length == 0) {
      System.out.println("Usage : java ALexico_GUI <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ALexico_GUI scanner = null;
        try {
          scanner = new ALexico_GUI( new java.io.FileReader(argv[i]) );
              pane = scanner.yylex();
          return pane;
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
        return null;
  }
		  
		  private int coment_uno = 0,coment_dos = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexico_GUI(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexico_GUI(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ColorPane yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { this.texto_formato.append(texto_reserv,yytext());
          }
        case 9: break;
        case 4: 
          { this.texto_formato.append(texto_normal,yytext());
          }
        case 10: break;
        case 5: 
          { this.texto_formato.append(texto_id,yytext());
          }
        case 11: break;
        case 3: 
          { this.texto_formato.append(texto_const,yytext());
          }
        case 12: break;
        case 1: 
          { this.texto_formato.append(texto_raro,yytext());
          }
        case 13: break;
        case 2: 
          { String s = yytext(); if(s.compareTo("\r") != 0) this.texto_formato.append(texto_normal,yytext()); /***/
          }
        case 14: break;
        case 8: 
          { this.texto_formato.append(texto_string,yytext());
          }
        case 15: break;
        case 7: 
          { this.texto_formato.append(texto_comment,yytext());
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return this.texto_formato;
            }
            case 159: break;
            default:
            return this.texto_formato;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
}
