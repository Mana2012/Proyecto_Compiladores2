/* The following code was generated by JFlex 1.4.3 on 3/2/15 9:25 AM */

package ALexico;
import ASintactico.sym;
import java.io.FileWriter;
import java.io.PrintWriter;
import java_cup.runtime.Symbol;
import GUI.GUI;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/2/15 9:25 AM from the specification file
 * <tt>C:/Users/Andrea/Documents/GIT/src/ALexico/ALexico.flex</tt>
 */
public class ALexico extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\2\0\1\2\22\0\1\2\1\0\1\21\4\0"+
    "\1\20\1\40\1\41\1\45\1\43\1\16\1\44\1\5\1\46\1\3"+
    "\11\6\1\0\1\17\1\50\1\42\1\51\2\0\1\12\1\30\1\22"+
    "\1\14\1\10\1\35\1\34\1\23\1\33\2\4\1\31\1\32\1\13"+
    "\1\15\1\26\1\4\1\7\1\36\1\11\1\27\1\47\1\37\1\4"+
    "\1\25\1\4\4\0\1\24\1\0\1\12\1\30\1\22\1\14\1\10"+
    "\1\35\1\34\1\23\1\33\2\4\1\31\1\32\1\13\1\15\1\26"+
    "\1\4\1\7\1\36\1\11\1\27\1\47\1\37\1\4\1\25\1\4"+
    "\1\52\1\0\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\3\7\1\1\4"+
    "\1\5\12\1\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\1\2\0\11\17\1\20\1\17"+
    "\1\21\2\0\10\17\1\22\5\17\1\23\1\24\1\25"+
    "\1\26\1\0\1\27\1\30\1\31\5\17\1\32\1\33"+
    "\2\17\1\34\1\35\1\36\6\17\1\37\1\17\1\0"+
    "\1\17\1\40\3\17\1\41\1\0\1\17\1\42\10\17"+
    "\1\43\2\0\4\17\12\0\2\17\2\0\2\17\3\0"+
    "\1\44\1\17\1\45\1\46\4\0\1\47\5\0\2\17"+
    "\3\0\1\17\4\0\1\17\5\0\1\50\2\0\1\51"+
    "\1\0\1\17\4\0\1\17\7\0\1\52\1\53\5\0"+
    "\1\54\5\0\1\55\2\0\1\17\10\0\1\56\4\0"+
    "\1\57\4\0\1\60\1\61\3\0\1\62\2\0\1\63"+
    "\7\0\1\64\1\65\2\0\1\66\14\0\1\67\1\70"+
    "\1\0\1\71\10\0\1\72\10\0\1\73\1\0\1\74"+
    "\3\0\1\75\1\0\1\76\2\0\1\77\2\0\1\100"+
    "\2\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\54\0\130\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\54\0\54\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\54\0\54\0\u03c8\0\54\0\54\0\54\0\54"+
    "\0\u03f4\0\u0420\0\u044c\0\130\0\u0478\0\204\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\204\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\54\0\54\0\54\0\54\0\u044c\0\u044c\0\u0478"+
    "\0\204\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\204\0\204"+
    "\0\u09f8\0\u0a24\0\204\0\54\0\u0688\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u0b2c\0\204\0\u0b58\0\u0b84\0\u0bb0\0\204"+
    "\0\u0bdc\0\u0c08\0\u0c34\0\204\0\u0c60\0\u0c8c\0\204\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\204"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\204\0\u1264\0\u1290\0\204\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\54\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448"+
    "\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\54"+
    "\0\u1708\0\u1734\0\54\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810"+
    "\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970"+
    "\0\u199c\0\54\0\54\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78"+
    "\0\54\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\54\0\u1b80"+
    "\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\u1d38\0\54\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\54"+
    "\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\54\0\204\0\u1ec4\0\u1ef0"+
    "\0\u1f1c\0\54\0\u1f48\0\u1f74\0\54\0\u1fa0\0\u1fcc\0\u1ff8"+
    "\0\u2024\0\u2050\0\u207c\0\u20a8\0\54\0\54\0\u20d4\0\u2100"+
    "\0\54\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234"+
    "\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\54\0\54\0\u233c"+
    "\0\54\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470"+
    "\0\u249c\0\54\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4"+
    "\0\u25d0\0\u25fc\0\54\0\u2628\0\54\0\u2654\0\u2680\0\u26ac"+
    "\0\54\0\u26d8\0\54\0\u2704\0\u2730\0\54\0\u275c\0\u2788"+
    "\0\54\0\u27b4\0\u27e0\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\5\1\2\1\5\1\23\1\5\1\24"+
    "\1\5\1\25\1\26\1\5\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\5\1\41"+
    "\1\42\1\43\1\2\57\0\1\44\1\0\1\45\1\44"+
    "\50\0\2\46\1\0\10\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\1\6\1\0\1\45\1\6\50\0"+
    "\2\46\1\0\2\46\1\47\5\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\5\46\1\50"+
    "\2\46\4\0\2\46\1\0\4\46\1\51\6\46\7\0"+
    "\1\46\7\0\2\46\1\0\1\46\1\52\6\46\4\0"+
    "\1\46\1\53\1\0\13\46\7\0\1\46\7\0\2\46"+
    "\1\0\5\46\1\54\2\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\2\46\1\0\7\46\1\55\4\0"+
    "\2\46\1\0\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\2\46\1\56\4\46\1\57\4\0\2\46\1\0\6\46"+
    "\1\60\4\46\7\0\1\46\7\0\2\46\1\0\1\46"+
    "\1\61\6\46\4\0\2\46\1\0\13\46\7\0\1\46"+
    "\10\0\1\62\2\0\7\62\4\0\2\62\1\0\13\62"+
    "\7\0\1\62\4\0\1\63\1\0\52\63\3\0\2\46"+
    "\1\0\4\46\1\64\3\46\4\0\1\46\1\65\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\1\46\1\66"+
    "\6\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\2\46\1\67\4\46\1\70\4\0\2\46"+
    "\1\0\13\46\7\0\1\46\7\0\2\46\1\0\4\46"+
    "\1\71\2\46\1\72\4\0\2\46\1\0\13\46\7\0"+
    "\1\46\7\0\2\46\1\0\5\46\1\73\2\46\4\0"+
    "\2\46\1\0\10\46\1\74\2\46\7\0\1\46\7\0"+
    "\2\46\1\0\4\46\1\75\2\46\1\76\4\0\2\46"+
    "\1\0\13\46\7\0\1\46\7\0\2\46\1\0\2\46"+
    "\1\77\5\46\4\0\2\46\1\0\13\46\7\0\1\46"+
    "\7\0\2\46\1\0\1\46\1\100\6\46\4\0\1\46"+
    "\1\101\1\0\13\46\7\0\1\46\46\0\1\102\53\0"+
    "\1\103\6\0\1\104\44\0\1\105\11\0\1\106\1\0"+
    "\51\106\1\107\3\0\1\110\2\0\1\110\50\0\2\46"+
    "\1\0\3\46\1\111\1\112\3\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\6\46\1\113"+
    "\1\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\11\46\1\114"+
    "\1\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\2\46\1\115\10\46\7\0\1\46\7\0"+
    "\2\46\1\0\2\46\1\116\5\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\6\46\1\117"+
    "\1\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\3\46\1\120\4\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\10\46\1\121\2\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\2\46\1\122"+
    "\10\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\13\46\7\0\1\123\24\0\1\124\33\0"+
    "\1\63\1\0\17\63\1\125\32\63\3\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\11\46\1\126\1\46\7\0"+
    "\1\46\7\0\2\46\1\0\4\46\1\127\3\46\4\0"+
    "\2\46\1\0\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\7\46\1\130\4\0\2\46\1\0\13\46\7\0\1\46"+
    "\7\0\2\46\1\0\10\46\4\0\2\46\1\0\7\46"+
    "\1\131\3\46\7\0\1\46\7\0\2\46\1\0\7\46"+
    "\1\132\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\6\46\1\133"+
    "\4\46\7\0\1\46\7\0\2\46\1\0\6\46\1\134"+
    "\1\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\3\46\1\135\4\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\136\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\4\46\1\137\6\46\7\0"+
    "\1\46\7\0\2\46\1\0\1\46\1\140\6\46\4\0"+
    "\2\46\1\0\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\4\46\1\141\6\46\7\0"+
    "\1\46\7\0\2\46\1\0\10\46\4\0\2\46\1\0"+
    "\6\46\1\142\4\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\0\6\46\1\143\4\46\7\0"+
    "\1\46\7\0\2\46\1\0\6\46\1\144\1\46\4\0"+
    "\2\46\1\0\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\145\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\2\46\1\146\5\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\2\46\1\147"+
    "\5\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\5\46\1\150\2\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\4\46\1\151"+
    "\3\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\3\46\1\152"+
    "\7\46\7\0\1\46\7\0\2\46\1\0\2\46\1\153"+
    "\5\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\1\46\1\154\6\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\1\155\1\46\1\0\13\46\7\0\1\46\7\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\0\6\46\1\156\4\46"+
    "\7\0\1\46\7\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\0\4\46\1\157\6\46\7\0\1\46\7\0\2\46"+
    "\1\0\5\46\1\160\2\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\161\13\46\7\0\1\46\15\0\1\162\45\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\0\11\46\1\163\1\46"+
    "\7\0\1\46\7\0\2\46\1\0\2\46\1\164\5\46"+
    "\4\0\2\46\1\0\13\46\7\0\1\46\7\0\2\46"+
    "\1\0\3\46\1\165\4\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\0\4\46\1\166\6\46\7\0\1\46\20\0\1\167"+
    "\5\0\1\170\3\0\1\171\3\0\1\172\1\173\1\0"+
    "\1\174\1\175\1\176\17\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\177\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\2\46\1\200\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\0\2\46\1\201"+
    "\10\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\0\4\46\1\202\6\46\7\0\1\46\7\0"+
    "\2\46\1\0\10\46\4\0\2\46\1\203\13\46\7\0"+
    "\1\46\7\0\2\46\1\0\10\46\4\0\2\46\1\204"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\2\46\1\205"+
    "\5\46\4\0\2\46\1\0\13\46\7\0\1\46\7\0"+
    "\2\46\1\0\5\46\1\206\2\46\4\0\2\46\1\0"+
    "\13\46\7\0\1\46\7\0\2\46\1\0\10\46\4\0"+
    "\2\46\1\207\13\46\7\0\1\46\17\0\1\210\63\0"+
    "\1\211\33\0\2\46\1\0\2\46\1\212\5\46\4\0"+
    "\2\46\1\0\13\46\7\0\1\46\7\0\2\46\1\0"+
    "\10\46\4\0\1\213\1\46\1\0\13\46\7\0\1\46"+
    "\7\0\2\46\1\0\2\46\1\214\5\46\4\0\2\46"+
    "\1\0\13\46\7\0\1\46\7\0\2\46\1\0\2\46"+
    "\1\215\5\46\4\0\2\46\1\0\13\46\7\0\1\46"+
    "\14\0\1\216\55\0\1\217\50\0\1\220\56\0\1\221"+
    "\76\0\1\222\33\0\1\223\46\0\1\224\66\0\1\225"+
    "\63\0\1\226\46\0\1\227\30\0\2\46\1\0\10\46"+
    "\4\0\2\46\1\0\4\46\1\230\6\46\7\0\1\46"+
    "\7\0\2\46\1\0\2\46\1\231\5\46\4\0\2\46"+
    "\1\0\13\46\7\0\1\46\21\0\1\232\50\0\1\233"+
    "\2\0\1\234\41\0\2\46\1\0\6\46\1\235\1\46"+
    "\4\0\2\46\1\0\13\46\7\0\1\46\7\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\236\13\46\7\0\1\46"+
    "\21\0\1\237\65\0\1\240\34\0\1\241\46\0\2\46"+
    "\1\0\3\46\1\242\4\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\243\13\46\7\0\1\46\41\0\1\244\54\0\1\245"+
    "\32\0\1\246\71\0\1\247\27\0\1\250\75\0\1\251"+
    "\55\0\1\252\55\0\1\253\25\0\1\254\47\0\2\46"+
    "\1\0\3\46\1\255\4\46\4\0\2\46\1\0\13\46"+
    "\7\0\1\46\7\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\256\13\46\7\0\1\46\32\0\1\257\34\0\1\260"+
    "\72\0\1\261\30\0\2\46\1\0\10\46\4\0\2\46"+
    "\1\0\2\46\1\262\10\46\7\0\1\46\26\0\1\263"+
    "\3\0\1\264\3\0\1\265\2\0\1\266\1\267\1\270"+
    "\42\0\1\271\57\0\1\272\34\0\1\273\43\0\2\46"+
    "\1\0\10\46\4\0\2\46\1\274\13\46\7\0\1\46"+
    "\35\0\1\275\34\0\1\276\51\0\1\277\65\0\1\300"+
    "\44\0\1\301\50\0\1\302\74\0\1\303\37\0\1\304"+
    "\41\0\2\46\1\0\10\46\4\0\2\46\1\305\13\46"+
    "\7\0\1\46\17\0\1\306\51\0\1\307\51\0\1\310"+
    "\54\0\1\311\46\0\2\46\1\0\1\46\1\312\6\46"+
    "\4\0\2\46\1\0\13\46\7\0\1\46\16\0\1\313"+
    "\50\0\1\314\56\0\1\315\56\0\1\316\46\0\1\317"+
    "\66\0\1\320\40\0\1\321\65\0\1\322\44\0\1\323"+
    "\67\0\1\324\50\0\1\325\37\0\1\326\65\0\1\327"+
    "\41\0\1\330\65\0\1\331\53\0\1\332\60\0\1\333"+
    "\36\0\1\334\50\0\1\335\47\0\2\46\1\0\2\46"+
    "\1\336\5\46\4\0\2\46\1\0\13\46\7\0\1\46"+
    "\42\0\1\337\32\0\1\340\71\0\1\341\27\0\1\342"+
    "\75\0\1\343\55\0\1\344\27\0\1\345\56\0\1\346"+
    "\72\0\1\347\37\0\1\350\52\0\1\351\50\0\1\352"+
    "\52\0\1\353\55\0\1\354\73\0\1\355\46\0\1\356"+
    "\36\0\1\357\65\0\1\360\44\0\1\361\50\0\1\362"+
    "\74\0\1\363\60\0\1\364\26\0\1\365\70\0\1\366"+
    "\54\0\1\367\50\0\1\370\43\0\1\371\75\0\1\372"+
    "\41\0\1\373\37\0\1\374\65\0\1\375\41\0\1\376"+
    "\53\0\1\377\67\0\1\u0100\40\0\1\u0101\51\0\1\u0102"+
    "\66\0\1\u0103\60\0\1\u0104\34\0\1\u0105\60\0\1\u0106"+
    "\52\0\1\u0107\50\0\1\u0108\64\0\1\u0109\41\0\1\u010a"+
    "\55\0\1\u010b\50\0\1\u010c\70\0\1\u010d\55\0\1\u010e"+
    "\54\0\1\u010f\50\0\1\u0110\41\0\1\u0111\77\0\1\u0112"+
    "\25\0\1\u0113\60\0\1\u0114\47\0\1\u0115\51\0\1\u0116"+
    "\66\0\1\u0117\67\0\1\u0118\25\0\1\u0119\71\0\1\u011a"+
    "\35\0\1\u011b\55\0\1\u011c\51\0\1\u011d\54\0\1\u011e"+
    "\100\0\1\u011f\41\0\1\u0120\37\0\1\u0121\60\0\1\u0122"+
    "\64\0\1\u0123\36\0\1\u0124\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10252];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\12\1\2\11\12\1\2\11\1\1\4\11"+
    "\3\1\2\0\14\1\2\0\16\1\4\11\1\0\15\1"+
    "\1\11\11\1\1\0\6\1\1\0\13\1\2\0\4\1"+
    "\12\0\2\1\2\0\2\1\3\0\4\1\4\0\1\11"+
    "\5\0\2\1\3\0\1\1\4\0\1\1\5\0\1\11"+
    "\2\0\1\11\1\0\1\1\4\0\1\1\7\0\2\11"+
    "\5\0\1\11\5\0\1\11\2\0\1\1\10\0\1\11"+
    "\4\0\1\11\4\0\1\11\1\1\3\0\1\11\2\0"+
    "\1\11\7\0\2\11\2\0\1\11\14\0\2\11\1\0"+
    "\1\11\10\0\1\11\10\0\1\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\2\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static GUI _gui;
  private int coment_uno = 0,coment_dos = 0;
  public static String string_leido = "";
  public static boolean endoffile = false;
  public static boolean writestringd = false;
  public static boolean writestringc = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ALexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { return new Symbol(sym.SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 66: break;
        case 44: 
          { return new Symbol(sym.END_MAIN,yyline,yycolumn,yytext());
          }
        case 67: break;
        case 12: 
          { return new Symbol(sym.OPDIV,yyline,yycolumn,yytext());
          }
        case 68: break;
        case 15: 
          { return new Symbol(sym.ID,yyline,yycolumn,yytext());
          }
        case 69: break;
        case 34: 
          { return new Symbol(sym.TRUE,yyline,yycolumn,yytext());
          }
        case 70: break;
        case 39: 
          { return new Symbol(sym.END_IF,yyline,yycolumn,yytext());
          }
        case 71: break;
        case 57: 
          { return new Symbol(sym.END_CASE_OPT,yyline,yycolumn,yytext());
          }
        case 72: break;
        case 45: 
          { return new Symbol(sym.CASE_OPT,yyline,yycolumn,yytext());
          }
        case 73: break;
        case 16: 
          { return new Symbol(sym.DO,yyline,yycolumn,yytext());
          }
        case 74: break;
        case 36: 
          { return new Symbol(sym.FALSE,yyline,yycolumn,yytext());
          }
        case 75: break;
        case 40: 
          { return new Symbol(sym.END_FOR,yyline,yycolumn,yytext());
          }
        case 76: break;
        case 48: 
          { return new Symbol(sym.CHAR_OPER,yyline,yycolumn,yytext());
          }
        case 77: break;
        case 14: 
          { return new Symbol(sym.OPREL_MAQ,yyline,yycolumn,yytext());
          }
        case 78: break;
        case 47: 
          { return new Symbol(sym.END_WHILE,yyline,yycolumn,yytext());
          }
        case 79: break;
        case 49: 
          { return new Symbol(sym.PROCEDURE,yyline,yycolumn,yytext());
          }
        case 80: break;
        case 4: 
          { return new Symbol(sym.COMA,yyline,yycolumn,yytext());
          }
        case 81: break;
        case 51: 
          { return new Symbol(sym.BOOL_OPER,yyline,yycolumn,yytext());
          }
        case 82: break;
        case 3: 
          { return new Symbol(sym.NUM,yyline,yycolumn,yytext());
          }
        case 83: break;
        case 35: 
          { return new Symbol(sym.MAIN,yyline,yycolumn,yytext());
          }
        case 84: break;
        case 43: 
          { return new Symbol(sym.IF_THEN,yyline,yycolumn,yytext());
          }
        case 85: break;
        case 31: 
          { return new Symbol(sym.OPMOD,yyline,yycolumn,yytext());
          }
        case 86: break;
        case 28: 
          { return new Symbol(sym.OPDIV_T,yyline,yycolumn,yytext());
          }
        case 87: break;
        case 59: 
          { return new Symbol(sym.THEN_PROCEDURE,yyline,yycolumn,yytext());
          }
        case 88: break;
        case 7: 
          { return new Symbol(sym.PAR_DER,yyline,yycolumn,yytext());
          }
        case 89: break;
        case 29: 
          { return new Symbol(sym.CHAR,yyline,yycolumn,yytext());
          }
        case 90: break;
        case 61: 
          { return new Symbol(sym.END_SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 91: break;
        case 5: 
          { return new Symbol(sym.PCOMA,yyline,yycolumn,yytext());
          }
        case 92: break;
        case 26: 
          { return new Symbol(sym.AND,yyline,yycolumn,yytext());
          }
        case 93: break;
        case 9: 
          { return new Symbol(sym.OPSUM,yyline,yycolumn,yytext());
          }
        case 94: break;
        case 62: 
          { return new Symbol(sym.BEGIN_PROCEDURE,yyline,yycolumn,yytext());
          }
        case 95: break;
        case 64: 
          { return new Symbol(sym.BEGIN_SELECT_CASE,yyline,yycolumn,yytext());
          }
        case 96: break;
        case 20: 
          { return new Symbol(sym.OPREL_MEI,yyline,yycolumn,yytext());
          }
        case 97: break;
        case 27: 
          { return new Symbol(sym.NOT,yyline,yycolumn,yytext());
          }
        case 98: break;
        case 17: 
          { return new Symbol(sym.OR,yyline,yycolumn,yytext());
          }
        case 99: break;
        case 1: 
          { ALexico._gui.WriteLn("ERROR Lexico en la linea " + (yyline + 1) + ", columna " + (yycolumn + 1) + "; No se reconoce el simbolo: " + yytext());
	    ALexico._gui.selectorLinea.HighLightLine(yyline);
          }
        case 100: break;
        case 52: 
          { return new Symbol(sym.DOUBLE_NUM,yyline,yycolumn,yytext());
          }
        case 101: break;
        case 65: 
          { return new Symbol(sym.END_DEFAULT_CASE,yyline,yycolumn,yytext());
          }
        case 102: break;
        case 60: 
          { return new Symbol(sym.BEGIN_CASE_OPT,yyline,yycolumn,yytext());
          }
        case 103: break;
        case 55: 
          { return new Symbol(sym.BEGIN_WHILE,yyline,yycolumn,yytext());
          }
        case 104: break;
        case 6: 
          { return new Symbol(sym.PAR_IZQ,yyline,yycolumn,yytext());
          }
        case 105: break;
        case 38: 
          { return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
          }
        case 106: break;
        case 42: 
          { return new Symbol(sym.INT_NUM,yyline,yycolumn,yytext());
          }
        case 107: break;
        case 63: 
          { return new Symbol(sym.DEFAULT_CASE,yyline,yycolumn,yytext());
          }
        case 108: break;
        case 10: 
          { return new Symbol(sym.OPRES,yyline,yycolumn,yytext());
          }
        case 109: break;
        case 50: 
          { return new Symbol(sym.BEGIN_FOR,yyline,yycolumn,yytext());
          }
        case 110: break;
        case 18: 
          { return new Symbol(sym.IF,yyline,yycolumn,yytext());
          }
        case 111: break;
        case 33: 
          { return new Symbol(sym.READ,yyline,yycolumn,yytext());
          }
        case 112: break;
        case 23: 
          { return new Symbol(sym.COMMENT,yyline,yycolumn,yytext());
          }
        case 113: break;
        case 22: 
          { return new Symbol(sym.OPREL_MAI,yyline,yycolumn,yytext());
          }
        case 114: break;
        case 58: 
          { return new Symbol(sym.END_PROCEDURE,yyline,yycolumn,yytext());
          }
        case 115: break;
        case 53: 
          { return new Symbol(sym.CHAR_ARRAY,yyline,yycolumn,yytext());
          }
        case 116: break;
        case 41: 
          { return new Symbol(sym.ELSE_IF,yyline,yycolumn,yytext());
          }
        case 117: break;
        case 30: 
          { return new Symbol(sym.STRING,yyline,yycolumn,yytext());
          }
        case 118: break;
        case 8: 
          { return new Symbol(sym.ASIG,yyline,yycolumn,yytext());
          }
        case 119: break;
        case 54: 
          { return new Symbol(sym.BEGIN_MAIN,yyline,yycolumn,yytext());
          }
        case 120: break;
        case 32: 
          { return new Symbol(sym.FOR,yyline,yycolumn,yytext());
          }
        case 121: break;
        case 24: 
          { return new Symbol(sym.DOUBLE,yyline,yycolumn,yytext());
          }
        case 122: break;
        case 37: 
          { return new Symbol(sym.WRITE,yyline,yycolumn,yytext());
          }
        case 123: break;
        case 25: 
          { return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
          }
        case 124: break;
        case 11: 
          { return new Symbol(sym.OPMULT,yyline,yycolumn,yytext());
          }
        case 125: break;
        case 46: 
          { return new Symbol(sym.WRITE_LN,yyline,yycolumn,yytext());
          }
        case 126: break;
        case 21: 
          { return new Symbol(sym.OPREL_DIST,yyline,yycolumn,yytext());
          }
        case 127: break;
        case 13: 
          { return new Symbol(sym.OPREL_MEQ,yyline,yycolumn,yytext());
          }
        case 128: break;
        case 19: 
          { return new Symbol(sym.IGUAL,yyline,yycolumn,yytext());
          }
        case 129: break;
        case 2: 
          { 
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ALexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ALexico scanner = null;
        try {
          scanner = new ALexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }
}
