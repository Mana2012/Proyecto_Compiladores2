package GUI;

import ALexico.*;
import ASintactico.*;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

public class GUI extends javax.swing.JFrame {

    String Archivo = "";
    ColorPane pane;
    public LinePainter selectorLinea;
    public Highlighter.HighlightPainter HighlightPainter
            = new DefaultHighlighter.DefaultHighlightPainter(ALexico_GUI.error_highlight);
    private Stack _pilaZ = new Stack();

    public static String estado = "";
    //public BufferedImage logo_small = new ImageIO.read(getClass().getResource("\\Resources\\Logo_Small.PNG"));

    /**
     * Creates new form Interface
     */
    public GUI() {
        initComponents();

        this.gedit.setEditable(false);
        this.gedit.setBackground(Color.LIGHT_GRAY);
        TextLineNumber tln = new TextLineNumber(this.gedit);
        tln.setUpdateFont(true);
        this.jScrollPane2.setRowHeaderView(tln);
        ALexico._gui = this;
        selectorLinea = new LinePainter(this.gedit);
        loadRecentFile();

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        gedit.setFont(new Font(this.gedit.getFont().getName(),
                this.gedit.getFont().getStyle(),
                this.gedit.getFont().getSize() + 8));
        //this.setIconImage(logo_small);
    }

    public void ctrlz() {
        Object tmp = _pilaZ.pop();
        String estado_anterior = tmp != null ? tmp.toString() : "";
        if (estado_anterior.isEmpty()) {
            java.awt.Toolkit.getDefaultToolkit().beep();
        } else {
            this.gedit.setText(estado_anterior);
            this.checkLex(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        TEXTS_PANEL = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        output_txt = new javax.swing.JTextArea();
        ESTADO_PANEL = new javax.swing.JPanel();
        estado_txt = new javax.swing.JLabel();
        LINEA_PANEL = new javax.swing.JPanel();
        linea_txt = new javax.swing.JLabel();
        COLUMNA_PANEL = new javax.swing.JPanel();
        columna_txt = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gedit = new javax.swing.JTextPane();
        estado_txt1 = new javax.swing.JLabel();
        estado_txt2 = new javax.swing.JLabel();
        MENU_PRINCIPAL = new javax.swing.JMenuBar();
        Menu_menu = new javax.swing.JMenu();
        nuevo_menu = new javax.swing.JMenuItem();
        abrir_menu = new javax.swing.JMenuItem();
        guardar_menu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        Editar_menu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        compilar_menu = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        Ayuda_menu = new javax.swing.JMenu();
        manual_menu = new javax.swing.JMenuItem();
        acercaDe_menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMPILEX");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TEXTS_PANEL.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        output_txt.setEditable(false);
        output_txt.setColumns(20);
        output_txt.setFont(new java.awt.Font("Lucida Console", 0, 12)); // NOI18N
        output_txt.setRows(5);
        jScrollPane3.setViewportView(output_txt);

        javax.swing.GroupLayout TEXTS_PANELLayout = new javax.swing.GroupLayout(TEXTS_PANEL);
        TEXTS_PANEL.setLayout(TEXTS_PANELLayout);
        TEXTS_PANELLayout.setHorizontalGroup(
            TEXTS_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 921, Short.MAX_VALUE)
        );
        TEXTS_PANELLayout.setVerticalGroup(
            TEXTS_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        ESTADO_PANEL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));

        estado_txt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        estado_txt.setText("Compilex");

        javax.swing.GroupLayout ESTADO_PANELLayout = new javax.swing.GroupLayout(ESTADO_PANEL);
        ESTADO_PANEL.setLayout(ESTADO_PANELLayout);
        ESTADO_PANELLayout.setHorizontalGroup(
            ESTADO_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ESTADO_PANELLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(estado_txt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ESTADO_PANELLayout.setVerticalGroup(
            ESTADO_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ESTADO_PANELLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(estado_txt)
                .addContainerGap())
        );

        LINEA_PANEL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        linea_txt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        linea_txt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        linea_txt.setText("0");

        javax.swing.GroupLayout LINEA_PANELLayout = new javax.swing.GroupLayout(LINEA_PANEL);
        LINEA_PANEL.setLayout(LINEA_PANELLayout);
        LINEA_PANELLayout.setHorizontalGroup(
            LINEA_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(linea_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
        );
        LINEA_PANELLayout.setVerticalGroup(
            LINEA_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LINEA_PANELLayout.createSequentialGroup()
                .addComponent(linea_txt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        COLUMNA_PANEL.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        columna_txt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        columna_txt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        columna_txt.setText("0");

        javax.swing.GroupLayout COLUMNA_PANELLayout = new javax.swing.GroupLayout(COLUMNA_PANEL);
        COLUMNA_PANEL.setLayout(COLUMNA_PANELLayout);
        COLUMNA_PANELLayout.setHorizontalGroup(
            COLUMNA_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(columna_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );
        COLUMNA_PANELLayout.setVerticalGroup(
            COLUMNA_PANELLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(COLUMNA_PANELLayout.createSequentialGroup()
                .addComponent(columna_txt)
                .addContainerGap())
        );

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        gedit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        gedit.setAutoscrolls(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, linea_txt, org.jdesktop.beansbinding.ELProperty.create("${verticalAlignment}"), gedit, org.jdesktop.beansbinding.BeanProperty.create("caretPosition"));
        bindingGroup.addBinding(binding);

        gedit.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                geditCaretUpdate(evt);
            }
        });
        gedit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                geditKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                geditKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(gedit);

        estado_txt1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        estado_txt1.setText("Linea");

        estado_txt2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        estado_txt2.setText("Columna");

        Menu_menu.setText("Archivo");
        Menu_menu.setToolTipText("Click para crear nuevo archivo.");
        Menu_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_menuActionPerformed(evt);
            }
        });

        nuevo_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevo_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Document-Blank-icon (1).png"))); // NOI18N
        nuevo_menu.setText("Nuevo Archivo");
        nuevo_menu.setToolTipText("Click/ Aprete enter para crear un nuevo archivo.");
        nuevo_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo_menuActionPerformed(evt);
            }
        });
        Menu_menu.add(nuevo_menu);

        abrir_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrir_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/folder-open copy.png"))); // NOI18N
        abrir_menu.setText("Abrir");
        abrir_menu.setToolTipText("Click/ Aprete enter para cargar un archivo.");
        abrir_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir_menuActionPerformed(evt);
            }
        });
        Menu_menu.add(abrir_menu);

        guardar_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardar_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Save-icon (1).png"))); // NOI18N
        guardar_menu.setText("Guardar");
        guardar_menu.setToolTipText("Click/ Aprete enter para Guardar un archivo.");
        guardar_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_menuActionPerformed(evt);
            }
        });
        Menu_menu.add(guardar_menu);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Save-icon (1).png"))); // NOI18N
        jMenuItem1.setText("Guardar Como...");
        jMenuItem1.setToolTipText("Click/ Aprete enter para Guardar un archivo.");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Menu_menu.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Button-Close-icon.png"))); // NOI18N
        jMenuItem4.setText("Salir");
        jMenuItem4.setToolTipText("Click/ Aprete enter para salir.");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Menu_menu.add(jMenuItem4);

        MENU_PRINCIPAL.add(Menu_menu);

        Editar_menu.setText("Ejecutar");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/compilar y ejecutar (1).png"))); // NOI18N
        jMenuItem3.setText("Compilar y Ejecutar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Editar_menu.add(jMenuItem3);

        compilar_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        compilar_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/compilar (1).png"))); // NOI18N
        compilar_menu.setText("Compilar");
        compilar_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilar_menuActionPerformed(evt);
            }
        });
        Editar_menu.add(compilar_menu);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/undo-icon (1).png"))); // NOI18N
        jMenuItem2.setText("Deshacer");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Editar_menu.add(jMenuItem2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Limpiar");
        jMenuItem5.setToolTipText("Click/Aprete enter para limpiar el Output.");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        Editar_menu.add(jMenuItem5);

        MENU_PRINCIPAL.add(Editar_menu);

        Ayuda_menu.setText("Ayuda");
        Ayuda_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ayuda_menuActionPerformed(evt);
            }
        });

        manual_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        manual_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Document-Help-icon (1).png"))); // NOI18N
        manual_menu.setText("Manual");
        manual_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manual_menuActionPerformed(evt);
            }
        });
        Ayuda_menu.add(manual_menu);

        acercaDe_menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        acercaDe_menu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Resources/Button-Info-icon.png"))); // NOI18N
        acercaDe_menu.setText("Acerca De...");
        acercaDe_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaDe_menuActionPerformed(evt);
            }
        });
        Ayuda_menu.add(acercaDe_menu);

        MENU_PRINCIPAL.add(Ayuda_menu);

        setJMenuBar(MENU_PRINCIPAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
                    .addComponent(TEXTS_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ESTADO_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LINEA_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(estado_txt1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(estado_txt2)
                            .addComponent(COLUMNA_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TEXTS_PANEL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(estado_txt1)
                            .addComponent(estado_txt2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(COLUMNA_PANEL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LINEA_PANEL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ESTADO_PANEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Ayuda_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ayuda_menuActionPerformed

    }//GEN-LAST:event_Ayuda_menuActionPerformed

    private void acercaDe_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaDe_menuActionPerformed

    }//GEN-LAST:event_acercaDe_menuActionPerformed

    private void manual_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manual_menuActionPerformed
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(new URI("https://github.com/danyacosta91/Proyecto_Compiladores/wiki"));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_manual_menuActionPerformed

    private void abrir_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrir_menuActionPerformed
        abrirArchivo();
    }//GEN-LAST:event_abrir_menuActionPerformed

    public void abrirArchivo() {
        String aux = "", texto = "";
        try {
            JFileChooser file = new JFileChooser();
            file.setFileFilter(new FileNameExtensionFilter("LCS Files *.rul", "rul"));
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            if (abre != null) {
                FileReader archivos = new FileReader(abre);
                BufferedReader lee = new BufferedReader(archivos);
                while ((aux = lee.readLine()) != null) {
                    texto += aux + "\n";
                }
                lee.close();
            }
            this.Archivo = abre.getName();
            this.setTitle("COMPILEX - " + this.Archivo);
            this.checkLex(true);
            this.OutputClear();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex + "" + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        gedit.setText(texto);
    }

    private void guardar_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_menuActionPerformed
        if (this.Archivo.equals("")) {
            this.SaveAs();
        } else {
            this.guardarArchivo(this.gedit.getText());
        }
    }//GEN-LAST:event_guardar_menuActionPerformed

    public void SaveAs() {
        JFileChooser fc = new JFileChooser();
        if (this.Archivo != null && !this.Archivo.equals("")) {
            fc.setSelectedFile(new File(this.Archivo));
        }
        fc.setFileFilter(new FileNameExtensionFilter("COMPILEX Files *.rul", "rul"));
        fc.showSaveDialog(this);
        if (fc.getSelectedFile() != null) {

            String temp = fc.getSelectedFile().getAbsolutePath();
            temp = temp.trim();
            if (!temp.endsWith(".rul")) {
                temp += ".rul";
            }
            this.Archivo = temp;
            this.gedit.setEditable(true);
            this.guardarArchivo(this.gedit.getText());
        }
    }

    public void guardarArchivo(String texto) {
        File archivo = null;
        FileWriter fr = null;
        BufferedWriter br = null;

        try {
            archivo = new File(this.Archivo);
            fr = new FileWriter(archivo);
            br = new BufferedWriter(fr);

            br.write(texto);
            br.flush();

            this.setTitle("COMPILEX - " + this.Archivo);

            this.WriteLn("Archivo guardado correctamente en " + this.Archivo);
        } catch (Exception e) {
            this.WriteLn("Error al guardar el archivo " + this.Archivo);
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                this.WriteLn("Error al cerrar el archivo " + this.Archivo);
            }
        }
        this.saveRecentFile();
    }

    public void saveRecentFile() {
        File archivo = null;
        FileWriter fr = null;
        BufferedWriter br = null;

        try {
            archivo = new File("recent_file.rul");
            fr = new FileWriter(archivo);
            br = new BufferedWriter(fr);

            br.write(this.gedit.getText());
            br.flush();
        } catch (Exception e) {
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
            }
        }
    }


    private void nuevo_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo_menuActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_nuevo_menuActionPerformed

    public void nuevoArchivo() {
        pane = new ColorPane();
        if (this.gedit.getText().equals("")) {
            this.gedit.setBackground(ALexico_GUI.fondo);
            this.gedit.setEditable(true);
        } else {
            if (JOptionPane.showConfirmDialog(null, "Esta seguro que desea crear un nuevo archivo?\nSi no ha salvado su programa, se borrará") == 0) {
                this.gedit.setBackground(ALexico_GUI.fondo);
                this.gedit.setEditable(true);
                this.gedit.setText("");
                this.Archivo = "";
                this.setTitle("COMPILEX");
                this.estado_txt.setText("COMPILEX!");
            }
        }
    }

    private void geditCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_geditCaretUpdate
        int line = 0, column = 0, caretpos = this.gedit.getCaretPosition();
        String texto = this.gedit.getText();
        for (int i = 0; i < caretpos; i++) {
            if (texto.charAt(i + line) == 13) {
                line++;
                column = 0;
            } else {
                column++;
            }
        }
        column++;
        line++;
        this.linea_txt.setText(line + "");
        this.columna_txt.setText(column + "");
}//GEN-LAST:event_geditCaretUpdate

    private void geditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_geditKeyPressed
        if (!this.getTitle().endsWith("*")) {
            this.setTitle(this.getTitle() + "*");
        }

        //F, compilar
        if (evt.getKeyCode() == 116) {
            compilar();
        }

        if (evt.getKeyCode() != 116) {
            this.selectorLinea.DeleteHighlights();
        }

    }//GEN-LAST:event_geditKeyPressed

    private void geditKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_geditKeyReleased
        if (Character.isLetterOrDigit(evt.getKeyChar()) || isSimbol(evt.getKeyChar()) || evt.getKeyCode() == 10 || evt.getKeyCode() == 10 || evt.getKeyCode() == 117) {
            this.checkLex(true);
        }
    }//GEN-LAST:event_geditKeyReleased

    public boolean isSimbol(char c) {
        return c == '.' || c == '-' || c == '_' || c == '*' || c == '+'
                || c == '/' || c == '(' || c == ')' || c == '{' || c == '}'
                || c == '[' || c == ']' || c == ';' || c == '\'';
    }

    private void Menu_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_menuActionPerformed
        this.SaveAs();
    }//GEN-LAST:event_Menu_menuActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.SaveAs();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        this.ctrlz();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void compilar_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilar_menuActionPerformed
        compilar();
    }//GEN-LAST:event_compilar_menuActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        compilarEjecutar();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.saveRecentFile();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.saveRecentFile();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        this.OutputClear();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public synchronized void checkLex(boolean savestate) {
        int pos = this.gedit.getCaretPosition();
        String s = this.gedit.getText();
        this.gedit.setDocument(ALexico_GUI.getPane(this.gedit.getText()).getDocument());
        this.gedit.setCaretPosition(pos);
        if (savestate) {
            _pilaZ.push(this.gedit.getText());
        }
    }

    public void crearALexico() {
        JFlex.Main.generate(new File("src\\ALexico\\ALexico.flex"));
    }

    public void crearASintactico() {
        String opciones[] = new String[5];
        opciones[0] = "-destdir";
        opciones[1] = "src\\ASintactico\\";
        opciones[2] = "-parser";
        opciones[3] = "parser";
        opciones[4] = "src\\ASintactico\\Gramatica.cup";
        try {
            java_cup.Main.main(opciones);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void compilar() {
        this.OutputClear();
        try {
            parser p = new parser(new ALexico(new java.io.FileReader(this.Archivo)));
            this.estado_txt.setText("Ejecutando Analisis Lexico y Sintactico...");
            try {
                p.parse();
                if (p.getErrores().size() == 0) {
                   this.WriteLn("Programa Lexico y Sintacticamente correcto...!");
                }
            } catch (Exception ex) {
                System.out.println("ERROR ON PARSING");
            }
        } catch (FileNotFoundException ex) {
            System.out.println("ERROR " + ex);
        }
    }

    public void compilarEjecutar() {

    }

    public final void loadRecentFile() {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;

        try {
            archivo = new File("recent_file.rul");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            if (!archivo.exists()) {
                this.WriteLn("Error en el archivo " + this.Archivo + " ha sido eliminado o movido...");
                this.setTitle("COMPILEX");
            } else {
                this.nuevoArchivo();
            }

            int lect = 0;
            do {
                lect = br.read();

                this.Archivo += ((lect != -1) ? (char) lect : "");
            } while (lect != -1);
            this.Archivo = "recent_file.rul";
        } catch (Exception e) {
            this.WriteLn("Error al leer el archivo " + this.Archivo);
            this.setTitle("COMPILEX");
            this.WriteLn("Exception: " + e);
            this.Archivo = "";
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                this.WriteLn("Error al leer el archivo " + this.Archivo);
                this.setTitle("COMPILEX");
                this.Archivo = "";
            }
        }

        if (this.Archivo.compareTo("") != 0) {
            this.cargarArchivo();
        }
    }

    public void cargarArchivo() {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        try {
            archivo = new File(this.Archivo);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            String lectura = "";
            int lect = 0;
            do {
                lect = br.read();
                lectura += (((lect != -1) ? (char) lect : ""));
            } while (lect != -1);

            this.gedit.setText(lectura);
            this.WriteLn("Archivo " + this.Archivo + " leido correctamente");
            this.setTitle("COMPILEX - " + this.Archivo);
        } catch (Exception e) {
            this.WriteLn("Error al leer el archivo " + this.Archivo);
            this.setTitle("COMPILEX");
            this.WriteLn("Exception: " + e);
            this.Archivo = "";
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                this.WriteLn("Error al leer el archivo " + this.Archivo);
                this.setTitle("COMPILEX");
                this.Archivo = "";
            }
        }
        this.saveRecentFile();
        this.checkLex(true);
    }

    public void Write(String texto) {
        this.output_txt.append(texto);
    }

    public void WriteLn(String texto) {
        this.output_txt.append(texto + "\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    public JTextPane getGedit() {
        return this.gedit;
    }

    public void HightLightLine(int row) {

        int line = 0, pos = 0;
        String texto = this.gedit.getText();

        if (row == 0) {
            int limit = 0;
            while (texto.charAt(limit) != 13) {
                limit++;
            }
            try {
                this.gedit.getHighlighter().addHighlight(0, limit, HighlightPainter);
            } catch (BadLocationException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

        }

        for (int i = 0; i < texto.length() - 1; i++) {
            if (texto.charAt(i + line) == 13) {
                line++;
                pos++;
                if (line == row) {
                    int limit = 0;
                    while (texto.charAt(i + limit + line) != 13) {
                        limit++;
                    }
                    try {
                        this.gedit.getHighlighter().addHighlight(pos + line - 1, pos + line + limit, HighlightPainter);
                    } catch (BadLocationException ex) {
                        JOptionPane.showMessageDialog(null, ex);
                    }
                    i = texto.length() + 1;
                }
            } else {
                pos++;
            }
        }
    }

    public void OutputClear() {
        this.output_txt.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Ayuda_menu;
    private javax.swing.JPanel COLUMNA_PANEL;
    private javax.swing.JPanel ESTADO_PANEL;
    private javax.swing.JMenu Editar_menu;
    private javax.swing.JPanel LINEA_PANEL;
    private javax.swing.JMenuBar MENU_PRINCIPAL;
    private javax.swing.JMenu Menu_menu;
    private javax.swing.JPanel TEXTS_PANEL;
    private javax.swing.JMenuItem abrir_menu;
    private javax.swing.JMenuItem acercaDe_menu;
    private javax.swing.JLabel columna_txt;
    private javax.swing.JMenuItem compilar_menu;
    public static javax.swing.JLabel estado_txt;
    public static javax.swing.JLabel estado_txt1;
    public static javax.swing.JLabel estado_txt2;
    private javax.swing.JTextPane gedit;
    private javax.swing.JMenuItem guardar_menu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel linea_txt;
    private javax.swing.JMenuItem manual_menu;
    private javax.swing.JMenuItem nuevo_menu;
    private javax.swing.JTextArea output_txt;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
